Checklist for an Infernal release.
EPN, Mon Jun 25 14:40:53 2012

Updated for 1.1 release, based on HMMER's 00CHECKLIST.
-------------------------------------

When editing this 00CHECKLIST, it is best to edit it only in the
trunk, not in a release branch. It isn't included in releases anyway.

Subversion repository:  https://svn.janelia.org/eddylab/eddys/src/infernal

Infernal, like HMMER, follows an 'unstable trunk' policy.  Each major
release goes onto a stable branch.  Every release (even minor ones) is
tagged.

Release types: major releases, minor releases, and snapshots. A major
release gets its own branch. A minor release puts bug fixes into a
major branch. A snapshot is from the development trunk.

Version naming:                                               example
major             <lineage>.<major-release>                   1.0
minor             <lineage>.<major-release>.<minor-release>   1.0.1
alpha             <lineage>.<major-release>a<n>               1.0a1 
beta              <lineage>.<major-release>b<n>               1.0b3 
release candidate <lineage>.<major-release>rc<n>              1.0rc1
snapshot          <lineage>.<major-release>.snap<yyyymmdd>    1.0.snap20080325


* Announce intent to release to all developers. 
   Commit working copies on all machines.
   Check for stray uncommitted files:
	 ./configure
         make distclean
         svn update
	 svn status
   Clean up any stray files identified by 'svn status'.
   'svn add' and 'svn commit' as needed to commit new or modified files.


================================================================
= Creating a new major release branch, if necessary
================================================================

For major public releases (1.1, 1.2): we create a Subversion branch,
so we can continue support (with bugfixes) without disrupting
development of the next main release.

*  First test the development trunk.
   Compile should be entirely clean when compiled -Wall.
   'make check' should be clean.
   'make dev' should be clean.
   '(cd documentation/userguide; make)' should work

   When trunk is clean, 
   svn commit
   We're (usually) next going to move out of the trunk to the release branch.

*  Create stable release branch from the trunk.
   All subsequent bugfix releases will happen in this branch, while trunk keeps moving.

   svn copy https://svn.janelia.org/eddylab/eddys/src/infernal/trunk\
            https://svn.janelia.org/eddylab/eddys/src/infernal/branches/1.1\ 
            -m "created Infernal 1.1 release branch"
   svn copy https://svn.janelia.org/eddylab/eddys/src/hmmer/trunk\
            https://svn.janelia.org/eddylab/eddys/src/hmmer/branches/infernal/1.1\
            -m "created Infernal 1.1 release branch"          
   svn copy https://svn.janelia.org/eddylab/eddys/easel/trunk\
            https://svn.janelia.org/eddylab/eddys/easel/branches/infernal/1.1\
            -m "created Infernal 1.1 release branch"          


==================================================================
= Work in the current release branch (~/releases/infernal-release)
==================================================================

Once a release branch has been taken (either new, or by a merge from
the trunk destined to become a release), work only in the release
branch. We'll merge changes back to the trunk when the release cycle
is complete.

* Checking out a release branch for the first time, in ~/releases/
    cd ~/releases
    svn checkout https://svn.janelia.org/eddylab/eddys/src/infernal/branches/1.1  infernal-release

Don't call this working directory infernal-1.1, nor infernal! Call it
infernal-release, because later we'll create infernal-xx as its
release, and because you want to recognize that it's different from
src/infernal.

If this is the first time (a new release branch), you also need to
update the "svn:externals" so Easel and HMMER are checked out from 
the appropriate stable branch too.

   svn proplist --verbose https://svn.janelia.org/eddylab/eddys/src/infernal/branches/1.1
   svn propedit svn:externals infernal-release
      easel   https://svn.janelia.org/eddylab/eddys/easel/branches/infernal/1.1
      hmmer   https://svn.janelia.org/eddylab/eddys/src/hmmer/branches/infernal/1.1
   cd infernal-release
   svn update
   svn commit

Note the hassle with svn:externals, because it currently only accepts
absolute URLs. Relative paths are supposed to become available in
Subversion 1.5, which may help. Later if we merge the branch back to
the trunk, the merge will mess up easel's and hmmer's externals, and
we'll have to propedit the trunk.


================================================================
= Large merges from the trunk: try to avoid
================================================================

It's preferable to add bug fixes to the release branch, then merge
them one at a time back to the trunk.

However, there may be times when we merge the trunk to the branch in
toto, as one big diff. To do that, if you must:

first merge infernal trunk in:
   cd ~/releases
   svn checkout https://svn.janelia.org/eddylab/eddys/src/infernal/branches/1.1 infernal-release
   cd infernal-release
   svn merge https://svn.janelia.org/eddylab/eddys/src/infernal/branches/1.1   https://svn.janelia.org/eddylab/eddys/src/infernal/trunk

now fix the svn:externals:
   svn propedit svn:externals infernal-release
     easel   https://svn.janelia.org/eddylab/eddys/easel/branches/infernal/1.1
     hmmer   https://svn.janelia.org/eddylab/eddys/src/hmmer/branches/infernal/1.1

now merge into easel and hmmer:
   cd infernal-release/easel
   svn merge https://svn.janelia.org/eddylab/eddys/easel/branches/infernal/1.1 https://svn.janelia.org/eddylab/eddys/easel/trunk
   cd ../hmmer
   svn merge https://svn.janelia.org/eddylab/eddys/src/hmmer/branches/infernal/1.1 https://svn.janelia.org/eddylab/eddys/src/hmmer/trunk


================================================================
= Preparing a distribution
================================================================

We prepare and make a distro; later we test it thoroughly. This way
we'll test exactly the version that's rolling out. If something goes
wrong, it's easy enough to come back and make a new tarball.


* Write the release notes in releases/.
  To gather information, check:
   Infernal Bugs/BUGTRAX - update this file to mark release that fixed
                           bugs, and divider indicating release.
   Paper notebook since last release
   svn log since last release:
   svn log -r3022:HEAD https://svn.janelia.org/eddylab/eddys/src/hmmer/trunk
   svn log  -r428:HEAD https://svn.janelia.org/eddylab/eddys/easel/trunk

   When done, svn add the new RELEASE-xxx file.

* Edit configure.ac: make sure version, date, copyright info is set correctly.
  Do this in easel and hmmer too, they won't use their configure's
  unless someone goes in there and manually does it, but they should
  be updated (e.g. version i1.1).
   emacs configure.ac
   emacs easel/configure.ac
   emacs hmmer/configure.ac
   autoconf; (cd easel; autoconf); (cd hmmer; autoconf);
   ./configure
   . release-notes/LICENSE.sh

* Edit .bashrc
  I use the following environment variables in the scripting below:
    INFERNAL_VERSION              The current version.  
    INFERNAL_OLDVERSION           The version we regress against. (found in ~releases/infernal-${INFERNAL_OLDVERSION}
    INFERNAL_RELEASE_NOTEBOOK     The e-notebook dir ({HOME}/notebook/xxx)
    INFERNAL_OLDRELEASE_NOTEBOOK  The e-notebook dir used for last release ({HOME}/notebook/xxx)

  Having these set everywhere, in all the ssh'ing you're about to 
  do, simplifies the scripting below, and reduces the odds of 
  cut/paste errors.

   . ~/.bashrc

* Build versions for the Tutorial runs.

This needs to be an icc/MPI version - mpi tests are included. 
Build a previous version (${INFERNAL_OLDVERSION}) in addition to the release candidate.

icc 11.1 with IntelMPI; on login-eddy
gcc 4.1.2 without mpi;  on login-eddy

Note that my .bashrc includes some configuration of the compilation
environment. I have functions "setup_icc_intel64" and "setup_icc_ia32"
for setting up the appropriate icc. I also have a number of Intel MPI
environment variables set.

Note I don't do 'make devcheck' here, simply in the interest of time
(it takes about an hour). We'll do that later to make sure everything
passes. 

On login-eddy (our compile host):
  ssh login-eddy
  cd ~/releases/infernal-release
  make distclean
  rm -rf build-gcc
  mkdir build-gcc
  cd build-gcc
  ../configure     > build.out  2>&1
  make            >> build.out  2>&1
  make dev        >> build.out  2>&1
  make check      >> build.out  2>&1

  ssh login-eddy
  cd ~/releases/infernal-release
  rm -rf build-icc-mpi
  mkdir build-icc-mpi
  cd build-icc-mpi
  setup_icc_intel64
  ../configure CC=icc LDFLAGS=-static-intel --enable-mpi   > build.out  2>&1
  make            >> build.out  2>&1
  make dev        >> build.out  2>&1
  make check      >> build.out  2>&1

  ssh login-eddy
  cd ~/releases/infernal-${INFERNAL_OLDVERSION}
  make distclean
  rm -rf build-gcc
  mkdir build-gcc
  cd build-gcc
  ../configure   > build.out   2>&1
  make          >> build.out   2>&1
  make dev      >> build.out   2>&1
  make check    >> build.out   2>&1

  ssh login-eddy
  cd ~/releases/infernal-${INFERNAL_OLDVERSION}
  rm -rf build-icc-mpi
  mkdir build-icc-mpi
  cd build-icc-mpi
  setup_icc_intel64
  ../configure CC=icc LDFLAGS=-static-intel --enable-mpi > build.out 2>&1
  make          >> build.out  2>&1
  make dev      >> build.out  2>&1
  make check    >> build.out  2>&1

This sets up:

Release candidate:
  srcdir              ~/releases/infernal-release
  builddir (gcc)      ~/releases/infernal-release/build-gcc
  builddir (icc,MPI)  ~/releases/infernal-release/build-icc-mpi

~/releases/infernal-${INFERNAL_OLDVERSION} (old version for regression):
  srcdir              ~/releases/infernal-${INFERNAL_OLDVERSION}
  builddir (gcc)      ~/releases/infernal-${INFERNAL_OLDVERSION}/build-gcc
  builddir (icc,MPI)  ~/releases/infernal-${INFERNAL_OLDVERSION}/build-icc-mpi

* Update the user guide - including the tutorial section, and
  version numbers in the installation section.
  See last ~/notebook entry for scripts.
  Don't slack off on this step - it's a useful regression test as well.

* Commit (don't forget to commit in hmmer and easel too!)
    svn status
do any cleanup... 
    svn commit
    cd hmmer
    svn commit
    cd ../easel
    svn commit


================================================================
= Creating a source distribution
================================================================

${INFERNAL_VERSION}, ${EASEL_VERSION}, and ${HMMER_VERSION} tags used
below should match @INFERNAL_VERSION@, @EASEL_VERSION@ and
@HMMER_VERSION@ in configure.ac, Makefile.

* cd ~/releases

* Delete any old releases of the same number
   rm -rf infernal-${INFERNAL_VERSION}
   rm -f  infernal-${INFERNAL_VERSION}.tar
   rm -f  infernal-${INFERNAL_VERSION}.tar.gz

* Export a snapshot, alpha, beta, or release candidate from the development trunk: 
   svn export https://svn.janelia.org/eddylab/eddys/src/infernal/trunk infernal-${INFERNAL_VERSION}

  or: Export a major or minor release from its branch
   svn export https://svn.janelia.org/eddylab/eddys/src/infernal/branches/1.1 infernal-${INFERNAL_VERSION}

   cd infernal-${INFERNAL_VERSION}
   autoconf; (cd easel; autoconf); (cd hmmer; autoconf);
   ./configure
   . release-notes/LICENSE.sh

  1.1rc1: exported 4130/774
  1.1rc2: exported 4342/834
  1.1rc3: exported 4478/871

* Check that svn has file permissions right. 
  Both of these should have no output.
   find . ! -perm -u+r -print
   find . -perm o+x ! -perm -u+x -print

* versioning, dating, licensing (these are originally set in
  configure.ac, and exported as shell variables by LICENSE.sh call
  above, make sure they're correct using echo before proceeding)

   echo ${INFERNAL_VERSION}
   echo ${EASEL_VERSION}
   echo ${HMMER_VERSION}
   echo ${INFERNAL_DATE}
   echo ${HMMER_DATE}
   echo ${EASEL_DATE}
   echo ${INFERNAL_COPYRIGHT}
   echo ${HMMER_COPYRIGHT}
   echo ${EASEL_COPYRIGHT}

* must do Easel and HMMER first

   easel/devkit/sedition EASEL_VERSION ${EASEL_VERSION} EASEL_DATE "${EASEL_DATE}" EASEL_COPYRIGHT "${EASEL_COPYRIGHT}" easel/00README
   easel/devkit/sedition EASEL_VERSION ${EASEL_VERSION} EASEL_DATE "${EASEL_DATE}" EASEL_COPYRIGHT "${EASEL_COPYRIGHT}" easel/COPYRIGHT
   easel/devkit/sedition EASEL_VERSION ${EASEL_VERSION} EASEL_DATE "${EASEL_DATE}" EASEL_COPYRIGHT "${EASEL_COPYRIGHT}" easel/INSTALL
   easel/devkit/sedition EASEL_VERSION ${EASEL_VERSION} EASEL_DATE "${EASEL_DATE}" EASEL_COPYRIGHT "${EASEL_COPYRIGHT}" easel/LICENSE.tag
   find easel -type f -exec easel/devkit/sedition-pp LICENSE easel/LICENSE.tag {} \;   

   easel/devkit/sedition HMMER_VERSION ${HMMER_VERSION} HMMER_DATE "${HMMER_DATE}" HMMER_COPYRIGHT "${HMMER_COPYRIGHT}" hmmer/README
   easel/devkit/sedition HMMER_VERSION ${HMMER_VERSION} HMMER_DATE "${HMMER_DATE}" HMMER_COPYRIGHT "${HMMER_COPYRIGHT}" hmmer/COPYRIGHT
   easel/devkit/sedition HMMER_VERSION ${HMMER_VERSION} HMMER_DATE "${HMMER_DATE}" HMMER_COPYRIGHT "${HMMER_COPYRIGHT}" hmmer/INSTALL
   easel/devkit/sedition HMMER_VERSION ${HMMER_VERSION} HMMER_DATE "${HMMER_DATE}" HMMER_COPYRIGHT "${HMMER_COPYRIGHT}" hmmer/release-notes/LICENSE.tag
   find hmmer -type f -exec easel/devkit/sedition-pp LICENSE hmmer/release-notes/LICENSE.tag {} \;   

   easel/devkit/sedition INFERNAL_VERSION ${INFERNAL_VERSION} INFERNAL_DATE "${INFERNAL_DATE}" INFERNAL_COPYRIGHT "${INFERNAL_COPYRIGHT}" README
   easel/devkit/sedition INFERNAL_VERSION ${INFERNAL_VERSION} INFERNAL_DATE "${INFERNAL_DATE}" INFERNAL_COPYRIGHT "${INFERNAL_COPYRIGHT}" COPYRIGHT
   easel/devkit/sedition INFERNAL_VERSION ${INFERNAL_VERSION} INFERNAL_DATE "${INFERNAL_DATE}" INFERNAL_COPYRIGHT "${INFERNAL_COPYRIGHT}" INSTALL
   easel/devkit/sedition INFERNAL_VERSION ${INFERNAL_VERSION} INFERNAL_DATE "${INFERNAL_DATE}" INFERNAL_COPYRIGHT "${INFERNAL_COPYRIGHT}" release-notes/LICENSE.tag
   find .     -type f -exec easel/devkit/sedition-pp LICENSE release-notes/LICENSE.tag {} \;

   cd documentation/manpages/
   for manpage in *.man; do\
     ../../easel/devkit/sedition INFERNAL_VERSION ${INFERNAL_VERSION} INFERNAL_DATE "${INFERNAL_DATE}" INFERNAL_COPYRIGHT "${INFERNAL_COPYRIGHT}" INFERNAL_LICENSE "${INFERNAL_LICENSE}" INFERNAL_URL "${INFERNAL_URL}" $manpage;\
   done
   cd ../..

* compile documentation
   cd documentation/userguide
   make
   mv Userguide.pdf ../../Userguide.pdf
   cd ../..

* clean up files that don't belong in the distro, 
  including hmmer's easel subdir.
  (I chose to remove Manuscripts because it's big (39M))

  Note: after 1.1rc1, we changed this part: documentation/userguide
  in infernal and hmmer, and documentation/ in easel are no longer
  removed. Their Makefile.in's have been updated to check for req'd
  executables before building the guide. They were originally removed
  b/c Sean didn't want users going in there, running make, failing
  with many errors due to missing executables, and reporting bugs to
  us.

   make distclean
   cp   release-notes/RELEASE-${INFERNAL_VERSION} RELEASE-NOTES
   rm -rf Bugs
   rm -rf Manuscripts
   rm -rf release-notes
   rm -rf autobuild

   cd hmmer
   rm -rf easel
   rm -rf bugs
   rm -rf contrib
   rm -rf release-notes
   rm -rf test-speed
   rm -rf autobuild
   rm -rf autom4te.cache 

   cd ../easel
   rm -f  00CHECKLIST LICENSE.csh.in LICENSE.tag 
   cd ..

   rm *~

* record and finish release notes
  (Sean's command in HMMER that I skipped because I'm not sure what it
  does: cat RELEASE-NOTES | dumpnotes )
    
   emacs RELEASE-NOTES
   rm *~
Delete TO-DO sections and clean up for public consumption.

  (Again, not sure of this command that Sean uses for hmmer: 'texclean')

* package
   cd ..
   tar cvf infernal-${INFERNAL_VERSION}.tar infernal-${INFERNAL_VERSION}
   gzip infernal-${INFERNAL_VERSION}.tar

   1.1rc1: 11.7 Mb (gzipped)
   1.1rc2: 19.1 Mb (gzipped, diff b/c of documentation directories)
   1.1rc3: 19.2 Mb (gzipped)

All subsequent tests are on this source distro.


================================================================
= Build for testing
================================================================

It's important to build four sets of the executables for testing. Two
on login-eddy (build-gcc and build-icc-mpi) and two on the cluster
(build-cluster-gcc and build-cluster-icc-mpi). The cluster versions 
are now necessary (as of 1.1rc3) b/c those machines have recently
changed and it's recommended to compile code on the cluster that you
run on the cluster.

We'll use the login-eddy-built executables for any tests we run
locally (e.g. tests-fast.sh) and the cluster-built executables for any
tests we submit to the cluster (e.g. tests-slow.sh).

On login-eddy (our compile host):
  ssh login-eddy
  cd ~/releases/infernal-${INFERNAL_VERSION}
  mkdir build-gcc
  cd build-gcc
  ../configure     > build.out   2>&1
  make            >> build.out	 2>&1
  make dev        >> build.out	 2>&1
  make check      >> build.out	 2>&1
  make devcheck   >> build.out	 2>&1

  ssh login-eddy
  cd ~/releases/infernal-${INFERNAL_VERSION}
  mkdir build-icc-mpi
  cd build-icc-mpi
  setup_icc_intel64
  ../configure CC=icc LDFLAGS=-static-intel --enable-mpi   > build.out  2>&1
  make            >> build.out  2>&1
  make dev        >> build.out  2>&1
  make devcheck   >> build.out  2>&1

  ssh login-eddy
  qlogin -l excl=true
      NOTE: this will likely become 'qlogin -pe batch 16' with new
            cluster on 06.17.13
  cd ~/releases/infernal-${INFERNAL_VERSION}
  mkdir build-cluster-gcc
  cd build-cluster-gcc
  ../configure     > build.out   2>&1
  make            >> build.out	 2>&1
  make dev        >> build.out	 2>&1
  make check      >> build.out	 2>&1
  make devcheck   >> build.out	 2>&1

  ssh login-eddy
  qlogin -l excl=true
     NOTE: this will likely become 'qlogin -pe batch 16' with new
           cluster on 06.17.13
  cd ~/releases/infernal-${INFERNAL_VERSION}
  mkdir build-cluster-icc-mpi
  cd build-cluster-icc-mpi
  setup_icc_intel64
  ../configure CC=icc LDFLAGS=-static-intel --enable-mpi   > build.out  2>&1
  make            >> build.out  2>&1
  make dev        >> build.out  2>&1
  make devcheck   >> build.out  2>&1

================================================================
= Build and check on all compile farm nodes
================================================================

Look at current list of compile farm nodes on the lab wiki page.
For each machine, we manually login and build through a 
'make devcheck' and verify that all tests pass. 

Do this in ~/releases/infernal-${INFERNAL_VERSION}
(not in ~/releases/infernal-release/)

Example:
  cd ~/releases/infernal-${INFERNAL_VERSION}
  mkdir build-cf-xcompile
  cd build-cf-xcompile/

Create build.sh:

  cat build.sh
      ../configure       > build.out 2>&1
      make V=1          >> build.out 2>&1
      make V=1 dev      >> build.out 2>&1
      make V=1 check    >> build.out 2>&1
      make V=1 devcheck >> build.out 2>&1

   ssh xcompile.int.janelia.org
   cd ~/releases/infernal-${INFERNAL_VERSION}/build-cf-xcompile
   sh build.sh

Wait for it to finish. Then manually verify that all tests pass.

List of all compile farm nodes that should pass all tests as of
last release (1.1rc2):

(See http://wiki.int.janelia.org/wiki/display/EddyLab/Compile+Farm)
 for current list and for machine-specific instructions for building)

 1) Intel Apple OS/X (xcompile.int.janelia.org)        
 2) PowerPC IBM AIX  (cf-ppc2.int.janelia.org)         
 3) Linux on an AMD Opteron (cf-suse.int.janelia.org)  
 4) Debian 6.0.3 AMD64 (cf-debian.int.janelia.org)     
 5) Ubuntu 12.04 AMD64 (cf-ubuntu.int.janelia.org)     
 6) Fedora 16 AMD64 (cf-fedora.int.janelia.org)        doesn't mount  home dir
 7) OpenBSD 5.0 AMD64 (cf-openbsd.int.janelia.org)     
 8) OpenSuse 12.1 AMD64 (cf-opensuse.int.janelia.org)  
 9) FreeBSD 8.2 AMD64 (cf-freebsd.int.janelia.org)     
10) Ubuntu 12.0.4.1 32-bit (cf-ubuntu32)               

================================================================
= Testing
================================================================

See latest e-notebook for tests.

Current testing is three sets of jobs, see old notebook 00LOG. 

tests-fast.sh:          fast enough to run in succession.
tests-fast-valgrind.sh: same tests as tests-fast.sh but valgrind
tests-slow.sh:          submit to cluster, includes MPI jobs.

Output tests-fast.sh and tests-fast-valgrind.sh to a file, and
manually look at each line for errors. 

These instructions should work post-1.1rc2:

Set up tests:
  ssh login-eddy
  cd ${INFERNAL_RELEASE_NOTEBOOK}
  mkdir tests
  mkdir tests/out-files/
  mkdir tests/err-files/
  mkdir tests/out-oldversion-files/
  mkdir tests/err-oldversion-files/
  cd tests
  cp ${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/cp-required-files.sh ./
  sh cp-required-files.sh

Run tests:
tests-fast*.sh          run on login-eddy,                takes about 1 minute
tests-fast-valgrind*.sh run valgrind tests on login-eddy, takes about 30 minutes
tests-slow*.sh          submit to cluster,                takes about 2.5 hours

  time sh tests-fast.sh > tests-fast.out
  time sh tests-fast-oldversion.sh > tests-fast-oldversion.out
  diff tests-fast.out tests-fast-oldversion.out > tests-fast.diff

NOTE: With 1.1rc1 and 1.1rc2, I executed 'tests-fast-valgrind.sh' and
'tests-fast-valgrind-oldversion.sh' via 'submit-valgrind.sh', but
starting with 1.1rc3 I run them on login-eddy. The reason is that the
cluster nodes were showing weird valgrind errors that I could never
account for. This happened on both the current and 'new' cluster
nodes. The current nodes had changed since the 1.1rc2 release in that
a new OS had been installed on them (see Feb 26 2013 email from Rob
Lines). I never figured out the root of the problem, but decided to
not pursue it because it could only lead to more changes in the 1.1rc3
code, which were more likely to break something than fix anything
broken (if anything was in fact broken!) given the stability of hmmer3
and infernal 1.1rc1 and 1.1rc2 all of which valgrind was reporting
problems in on the cluster nodes.

  sh run-valgrind.sh  

Takes about 1 hour. Note run-valgrind does not run jobs in parallel
because current and old version tests create and use files of the same
name.  

Look at err-files/valg.1.err and make sure there's no memory
leaks or errors.

  diff tests-fast-valgrind.out tests-fast-valgrind-oldversion.out > tests-fast-valgrind.diff
  sh tests-slow.sh

  *** NOTE: post-1.1rc3: before running tests-slow-oldversion.sh, change
      tests-slow-oldversion.sh directories from build-gcc to
      build-cluster-gcc and build-icc-mpi to build-cluster-icc-mpi

  sh tests-slow-oldversion.sh 
Wait for these to finish (about 3 hours)
  sh regressify-slow.sh 
  sh regressify-slow-oldversion.sh
  sh diff-slow.sh > tests-slow.diff

Make sure all diff output includes only expected differences.
  emacs tests-fast.diff
  emacs tests-fast-valgrind.diff
  emacs tests-slow.diff

Make sure all err-files/* and err-oldversion-files/* are empty.

Remember to test on both builds (gcc and icc-mpi), the scripts above
already do this, except for the valgrind ones.

Then run some anecdotal tests.
     mkdir anecdotes
Some examples:
     cd anecdotes
     ~/releases/infernal-${INFERNAL_VERSION}/build-gcc/src/cmfetch ~/db/rfam_11.0/Rfam.cm.1_1 5S_rRNA > 5S.cm
     ~/releases/infernal-${INFERNAL_OLDVERSION}/build-gcc/src/cmfetch ~/db/rfam_11.0/Rfam.cm.1_1 5S_rRNA > 5S.old.cm
     diff 5S.cm 5S.old.cm
     ~/releases/infernal-${INFERNAL_VERSION}/build-gcc/src/cmstat 5S.cm
     ~/releases/infernal-${INFERNAL_VERSION}/build-gcc/src/cmstat 5S.old.cm
     ~/releases/infernal-${INFERNAL_VERSION}/build-gcc/src/cmsearch 5S.cm ~/genomes/hvol.fa
     ~/releases/infernal-${INFERNAL_OLDVERSION}/build-gcc/src/cmsearch 5S.cm ~/genomes/hvol.fa
     ~/releases/infernal-${INFERNAL_VERSION}/build-gcc/src/cmpress 5S.cm
     ~/releases/infernal-${INFERNAL_OLDVERSION}/build-gcc/src/cmpress 5S.old.cm
     ~/releases/infernal-${INFERNAL_VERSION}/build-gcc/src/cmscan 5S.cm ~/genomes/hvol.fa
     ~/releases/infernal-${INFERNAL_VERSION}/build-gcc/src/cmscan 5S.old.cm ~/genomes/hvol.fa
     ~/releases/infernal-${INFERNAL_VERSION}/build-gcc/src/cmsearch -A 5S.sto 5S.cm ~/genomes/hvol.fa
     ~/releases/infernal-${INFERNAL_VERSION}/build-gcc/easel/miniapps/esl-reformat fasta 5S.sto > 5S.faa
     ~/releases/infernal-${INFERNAL_VERSION}/build-gcc/src/cmalign 5S.cm 5S.fa 

Also, do a rmark3 benchmark with default settings and --mid.	      
(These commands should work post-i1.1rc2 if you're doing a small
update release)

     cd ${INFERNAL_RELEASE_NOTEBOOK}/tests/
     mkdir rmark3
     cd rmark3
     mkdir models

     cp ${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/rmark3/rmark3.msa ./
     cp ${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/rmark3/fetch.sh ./
     cp ${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/rmark3/build.sh ./
     cp ${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/rmark3/calibrate.sh ./
     sh fetch.sh
     sh build.sh
Wait for all jobs to finish (about 1 minute)
     sh calibrate.sh
Wait for all jobs to finish (about 30 minutes, if cluster is nearly empty)
     cat models/*.cm > models/rmark3.cm     

     cp ${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/rmark3/rmark3* ./
     cp ${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/rmark3/df.opts ./
     cp ${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/rmark3/mid.opts ./
     cp ${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/rmark3/do-symlink.sh ./
     cp ${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/rmark3/do-all.sh ./
     cp ${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/rmark3/do-pp.sh ./
Edit version number in do-symlink.sh, do-all.sh, do-pp.sh
     emacs do-symlink.sh     
     emacs do-all.sh
     emacs do-pp.sh
     sh do-symlink.sh
     sh do-all.sh 
Wait for jobs to finish (approximately 20 min)
     sh do-pp.sh 
Wait for jobs to finish (approximately 5 min)
      
Compare .sum files with .sum files from: 
${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/rmark3/	 

Check the userguide (Userguide.pdf).

Ensure 'make clean' and 'make distclean' finish without errors. The
1.1rc1 distro had a bug that caused errors for both of these. To do
this:
     cd ~/releases/infernal-${INFERNAL_VERSION}/
     sh ./configure;
     make
     make dev
     make clean
     make distclean

================================================================
= Binary distros
================================================================
  
  cd ${INFERNAL_RELEASE_NOTEBOOK}
  mkdir Distros; cd Distros

After talking with Sean, we decided to distribute linux-intel-gcc
instead of linux-intel-ia32 and linux-intel-x86_64 because of this
warning: 
  icc: warning #10237: -lcilkrts linked in dynamically, static library not available
If this gets resolved in the future, we may go back to distributing
binaries built with icc (64 and 32).

The lcilkrts is still a problem as of 1.1rc3 (June 7 2013)

Note: the configure call differs from the one Sean uses in hmmer. I
specify --prefix. If I don't do that I get a 'make install' error
because I don't have permission to change the permissions on the man
directory. Also, as a result I have to delete the share/ directory
after I install. (Sean doesn't have to do that b/c his build won't
create it).

Two builds:
  linux-intel-gcc
  macosx-intel

linux-intel-gcc:
  ssh login-eddy
  export INFERNAL_DISTRO=linux-intel-gcc
  cd ${INFERNAL_RELEASE_NOTEBOOK}/Distros
  tar zxf ~/releases/infernal-${INFERNAL_VERSION}.tar.gz
  mv infernal-${INFERNAL_VERSION} infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}
  cd infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}
  mkdir build-${INFERNAL_DISTRO}
  cd build-${INFERNAL_DISTRO}
  ../configure \
   --bindir=${INFERNAL_RELEASE_NOTEBOOK}/Distros/infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}/binaries \
   --prefix=${INFERNAL_RELEASE_NOTEBOOK}/Distros/infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO} \
   > ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-${INFERNAL_DISTRO}.out  2>&1
  make                             >> ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-${INFERNAL_DISTRO}.out   2>&1
  make dev                         >> ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-${INFERNAL_DISTRO}.out   2>&1
  make check                       >> ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-${INFERNAL_DISTRO}.out   2>&1
  make install                     >> ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-${INFERNAL_DISTRO}.out   2>&1
  (cd easel/miniapps; make install >> ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-${INFERNAL_DISTRO}.out   2>&1)
  rm -rf ${INFERNAL_RELEASE_NOTEBOOK}/Distros/infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}/share

  cd ..
  rm -rf build-${INFERNAL_DISTRO}
  cd .. 
  tar cf infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}.tar  infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}
  gzip infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}.tar


macosx-intel build (on Sean's desktop):
  ssh 10.102.30.160
  export INFERNAL_DISTRO=macosx-intel

  cd ${INFERNAL_RELEASE_NOTEBOOK}/Distros
  tar zxf ~/releases/infernal-${INFERNAL_VERSION}.tar.gz
  mv infernal-${INFERNAL_VERSION} infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}
  cd infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}

  mkdir build-${INFERNAL_DISTRO}
  cd build-${INFERNAL_DISTRO}
  ../configure \
   --bindir=${INFERNAL_RELEASE_NOTEBOOK}/Distros/infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}/binaries \
   --prefix=${INFERNAL_RELEASE_NOTEBOOK}/Distros/infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO} \
   > ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-${INFERNAL_DISTRO}.out  2>&1
  make                             >> ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-${INFERNAL_DISTRO}.out   2>&1
  make dev                         >> ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-${INFERNAL_DISTRO}.out   2>&1
  make check                       >> ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-${INFERNAL_DISTRO}.out   2>&1
  make install                     >> ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-${INFERNAL_DISTRO}.out   2>&1
  (cd easel/miniapps; make install >> ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-${INFERNAL_DISTRO}.out   2>&1)
  rm -rf ${INFERNAL_RELEASE_NOTEBOOK}/Distros/infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}/share

  cd ..
  rm -rf build-${INFERNAL_DISTRO}
  cd .. 
  tar cf infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}.tar  infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}
  gzip infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}.tar

Look at the build output for these two distros and make sure
everything looks normal and all tests pass:
  emacs ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-linux-intel-gcc.out
  emacs ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-macosx-intel.out

Test these Distro tarballs:

linux-intel-gcc: ${INFERNAL_RELEASE_NOTEBOOK}/Distros/infernal-${INFERNAL_VERSION}-linux-intel-gcc.tar.gz
macosx-intel:    ${INFERNAL_RELEASE_NOTEBOOK}/Distros/infernal-${INFERNAL_VERSION}-macosx-intel.tar.gz

Copy linux-intel-gcc to a new directory on your home dir on login-eddy
and test it with some anecdotal tets.
Copy macosx-intel tar ball to your laptop and test it.

================================================================
= Distribution
================================================================

* copy to ftp site

  I don't currently have permission to do the scp calls Sean does
  directly into var/ftp/pub/software/infernal/, but I can scp to my
  home directory and then 'sudo mv' it to
  /var/ftp/pub/software/infernal/, which is what I do below.

  Also, the /var/ftp/pub/software/infernal/ directory is organized a
  bit differently than the /var/ftp/pub/software/hmmer/ one. hmmer has
  a directory for each release, infernal only has a tarball. The
  README, RELEASE-NOTES, etc. files only exist at the top level, for
  the current release. I chose not to mimic hmmer with 1.1rc1, because
  it would require changing the website significantly.

   ssh selab
   export INFERNAL_VERSION=1.1rc3
   mkdir ~/to-be-infernal-${INFERNAL_VERSION}
   logout

   cd ~/releases
   scp infernal-${INFERNAL_VERSION}/README        selab:~/to-be-infernal-${INFERNAL_VERSION}
   scp infernal-${INFERNAL_VERSION}/RELEASE-NOTES selab:~/to-be-infernal-${INFERNAL_VERSION}
   scp infernal-${INFERNAL_VERSION}/COPYRIGHT     selab:~/to-be-infernal-${INFERNAL_VERSION}
   scp infernal-${INFERNAL_VERSION}/LICENSE       selab:~/to-be-infernal-${INFERNAL_VERSION}
   scp infernal-${INFERNAL_VERSION}/Userguide.pdf selab:~/to-be-infernal-${INFERNAL_VERSION}
   scp infernal-${INFERNAL_VERSION}.tar.gz        selab:~/to-be-infernal-${INFERNAL_VERSION}
   cd ${INFERNAL_RELEASE_NOTEBOOK}/Distros
   scp infernal-${INFERNAL_VERSION}-linux-intel-gcc.tar.gz   selab:~/to-be-infernal-${INFERNAL_VERSION}
   scp infernal-${INFERNAL_VERSION}-macosx-intel.tar.gz      selab:~/to-be-infernal-${INFERNAL_VERSION}

   ssh selab
   export INFERNAL_VERSION=1.1rc3
   sudo mv ~/to-be-infernal-${INFERNAL_VERSION}/* /var/ftp/pub/software/infernal/
   echo ftp://selab.janelia.org/pub/software/infernal/infernal-${INFERNAL_VERSION}.tar.gz
   sudo rm -f /var/ftp/pub/software/infernal/infernal.tar.gz
   (cd /var/ftp/pub/software/infernal; sudo ln -s infernal-${INFERNAL_VERSION}.tar.gz infernal.tar.gz)
   logout

* Install on login-eddy. Currently, I don't have permission to
  install software on login-eddy, so just email Goran at this point.
  (For 1.1rc3, asked him to install on both old and new cluster).

* Update the web site and the blog I can't do a 'make', because I
  don't have proper permission. So I have to copy all the files that
  change in ~/web/infernal/ (usually just index.html) to
  selab:~/to-be-web/, then sudo mv them to /opt/www/infernal/docs/

	 ssh selab
	 rm -rf ~/to-be-web/
	 mkdir ~/to-be-web/
	 logout

	 cd ~/web/infernal/
         svn update
         emacs index.html 
	 scp index.html nawrockie@selab:~/to-be-web/
	 
	 ssh selab
	 sudo mv ~/to-be-web/index.html /opt/www/infernal/docs/
	 logout

	 cd ~/web/infernal/
         svn commit

Don't forget to update the 'Last modified' bit at the bottom
of index.html.

Update website with Rfam files (if current version of Rfam is not 
compatible with new version of Infernal, which was true for 1.1rc1
and 1.1rc2).

What I did for 1.1rc2:

	 ssh selab
	 rm -rf ~/to-be-rfam/
	 mkdir ~/to-be-rfam/
	 sudo mkdir /var/ftp/pub/rfam/rfam-11.0   
	 logout

	 cd ${INFERNAL_RELEASE_NOTEBOOK}
	 cd rfam-files-for-infernal-website/for-website
	 scp * nawrockie@selab:~/to-be-rfam/

	 ssh selab
	 sudo mv ~/to-be-rfam/* /var/ftp/pub/rfam/rfam-11.0/
	 logout

* tag the release. Replace version # below!
   cd ~/releases/infernal-release

   svn copy https://svn.janelia.org/eddylab/eddys/src/infernal/branches/1.1\
            https://svn.janelia.org/eddylab/eddys/src/infernal/tags/${INFERNAL_VERSION}\
            -m "tagged 1.1rc3 release, from 1.1 branch"          
   svn copy https://svn.janelia.org/eddylab/eddys/src/hmmer/branches/infernal/1.1\
            https://svn.janelia.org/eddylab/eddys/src/hmmer/tags/infernal/${INFERNAL_VERSION}\
            -m "tagged HMMER for Infernal 1.1rc3 release, from Infernal 1.1 branch"          
   svn copy https://svn.janelia.org/eddylab/eddys/easel/branches/infernal/1.1\
            https://svn.janelia.org/eddylab/eddys/easel/tags/infernal/${INFERNAL_VERSION}\
            -m "tagged Easel for Infernal 1.1rc3 release, from Infernal 1.1 branch"          

   1.1rc1: svn 4131 hmmer:4132 easel:775
   1.1rc2: svn 4343 hmmer:4344 easel:835
   1.1rc2: svn 4479 hmmer:4480 easel:872

* Merge the branch's changes back to the trunk
  (This section is more verbose here than in the hmmer 00CHECKLIST. I
  added some notes from the old 1.0.2 Infernal 00CHECKLIST)

  ***You may have already done this for MOST changes in the branch if
     you've been rigorous about updating trunk when changes to branch
     are made. I had been with 1.1rc3. To manually check, do a search
     for "SVN Infernal" in gmail, and for all commits since previous
     release in the branch, manually check there's a corresponding
     update in the trunk. However, even if you've been rigorous,
     changes you've made just prior to a release (date updates in
     configure.ac's for example) will probably still need to be merged
     to the trunk.

  You must do this by diff of specific revisions in the branch.
  Do *not* diff the branch against the trunk; if the trunk has its own
  changes that should be retained, you'll revert them to the branch
  version!

  If you're doing a minor bugfix release on a stable branch, you know the
  revs that introduced the bugfixes; merge them explicitly. For example:

   cd ~/src/wd-infernal
   svn update
   svn merge -r 4471:HEAD https://svn.janelia.org/eddylab/eddys/src/infernal/branches/1.1
   svn commit
    
  If you're doing a major release on a new stable branch:
  First identify the rev #'s for when we made the release branch.
  In the release working copy:

   cd ~/releases/infernal-release/
   svn log --verbose --stop-on-copy
   cd hmmer
   svn log --verbose --stop-on-copy 
   cd easel
   svn log --verbose --stop-on-copy 

            infernal      hmmer        easel
   1.1rc1:  r4120:4130    r4123:r4124  r773:r774

  Careful with off-by-ones here. Changes made with the first
  revision in the range WON'T be merged (i.e. r4120: change of
  svn:externals).

  (Note with 1.1rc1, I didn't include the revisions to hmmer (r4122)
  and easel (r773) that changed the HMMER_VERSION, EASEL_VERSION
  variable in the configure.ac files to i1.1rc1).

  Go back to working copies of the trunks and merge the release branches into it.
       cd ~/src/infernal
       svn update

       svn diff  -r r4120:4130 https://svn.janelia.org/eddylab/eddys/src/infernal/branches/1.1 > tmp
       svn diff  -r r4123:4124 https://svn.janelia.org/eddylab/eddys/src/hmmer/branches/infernal/1.1
       svn diff  -r  r773:774  https://svn.janelia.org/eddylab/eddys/easel/branches/infernal/1.1

       svn merge -r 4120:4130 https://svn.janelia.org/eddylab/eddys/src/infernal/branches/1.1

       cd hmmer
       svn update
       svn merge -r 4123:4124 https://svn.janelia.org/eddylab/eddys/src/hmmer/branches/infernal/1.1

       cd ../easel
       svn update
       svn merge -r 773:774 https://svn.janelia.org/eddylab/eddys/easel/branches/infernal/1.1
       
  Now, depending on how you did the merge (whether or not you included
  the revision that did the propedit change of externals), you may
  have screwed up the svn:externals for Infernal. Check them and reset
  them if necessary.
  
       cd ..
       svn proplist --verbose 
       svn propedit svn:externals .
         easel https://svn.janelia.org/eddylab/eddys/easel/trunk
         hmmer https://svn.janelia.org/eddylab/eddys/src/hmmer/trunk
  
  Commits.
       svn commit 
       ( cd hmmer ; svn commit )
       ( cd easel ; svn commit )

Release history
---------------

   
0.3    - SRE, Thu Jul  4 10:27:16 2002
0.5    - SRE, Sun Oct  6 14:22:47 2002
0.51   - SRE, Wed Oct  9 09:43:50 2002
0.52   - SRE, Mon Oct 14 2002
0.53   - SRE, Thu Jan  2 14:24:07 2003
0.54   - SRE, Sun Jan  5 18:17:55 2003
0.55   - SRE, Wed Apr  2 18:12:23 2003   r875
0.6    - SRE, Tue Nov  1 17:13:00 2005   r1477  Easel:r72
0.7    - SRE, Tue Dec 13 14:54:30 2005   r1534  Easel:r84
0.71   - SRE, Thu Nov 30 11:43:57 2006   r1730  Easel:r142
0.72   - SRE, Sat Jan 27 10:44:46 2007   r1862  Easel:r149
0.8    - SRE, Sun Apr 29 11:55:56 2007   r1984  Easel:r176
0.81   - SRE, Tue May  1 10:36:10 2007   r1995  Easel:r179
1.0rc1 - SRE, Fri Jun 20 13:38:46 2008   r2492  Easel:r276
1.0rc2 - SRE, Sat Jul 12 09:26:29 2008   r2502  Easel:r280
1.0rc3 - SRE, Wed Sep 24 14:33:59 2008   r2596  Easel:r294
1.0rc4 - SRE, Mon Nov 24 17:43:07 2008   r2635  Easel:r304
1.0rc5 - SRE, Wed Dec 17 17:59:01 2008   r2673  Easel:r310
1.0    - SRE, Tue Jan 13 14:33:16 2009   r2710  Easel:r317
1.0.1  - SRE, Sat Oct 24 10:12:50 2009   r2997  Easel:r422
1.0.2  - SRE, Fri Oct 30 13:57:33 2009   r3022  Easel:r428
1.1rc1 - EPN, Wed Jun 27 22:02:39 2012   r4131  Easel:r775
1.1rc2 - EPN, Fri Dec 14 15:04:24 2012   r4343  Easel:r835
1.1rc3 - EPN, Tue Jun 11 05:55:39 2013   r4479  Easel:r872
