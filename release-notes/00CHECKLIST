Checklist for an Infernal release.
EPN, Mon Nov 18 13:09:06 2019

Updated for 1.1.3 release.
-------------------------------------

Git repositories:       https://github.com/EddyRivasLab/infernal.git

                        https://github.com/EddyRivasLab/hmmer.git

                        https://github.com/EddyRivasLab/easel.git

See instructions on how to do a release using the lab's git flow
strategy here: 

https://github.com/EddyRivasLab/infernal/wiki

And these pages may also be helpful:
https://github.com/EddyRivasLab/hmmer/wiki
https://github.com/EddyRivasLab/easel/wiki

==========================
= Creating a new release =
==========================

1. Announce intent to release to all developers.

2. Create release branches of easel, hmmer and infernal.

   See https://github.com/EddyRivasLab/infernal/wiki
   ## **Making a release**

   Follow those instructions until you get to the part that says
   "Now proceed with the rest of the release process for Infernal (see
   release-notes/00CHECKLIST)", at which point come back here.

   Make sure infernal builds cleanly
     # do the following on as many systems as are available
     # I did NCBI, my mac, EBI and Odyssey
     # autoconf; sh ./configure; make; make check; make devcheck; 
     # do some anecdotal testing of programs, make sure
     # version, date are correct.

     # make sure the user guide builds on at least one system (NCBI)
     $ cd documentation/userguide; make

     # Now, prepare the distribution, which involves more testing
     # and updating the user guide, then when you're sure you're
     # done, commit to the release branch and merge to master then
     # develop (instructions on this are below after the 'Preparing
     # a distribution' section).

================================================================
= Prepare the release and update the user guide
================================================================

* Write the release notes in releases/.
  To gather information, check:
   - GitHub's compare feature, e.g.:
      https://github.com/EddyRivasLab/infernal/compare/master...release-1.1.4
   - GitHub issues
   - release notes for corresponding HMMER and easel releases
   - feature branches and commit messages on github
   - no longer using Bugs/BUGTRAX

   When done, git add the new RELEASE-xxx.md file.

* Edit .bashrc
  I use the following environment variables in the scripting below:
    INFERNAL_VERSION              The current version.  
    INFERNAL_OLDVERSION           The version we regress against. (found in ~releases/infernal-${INFERNAL_OLDVERSION}
    INFERNAL_RELEASE_NOTEBOOK     The e-notebook dir ({HOME}/notebook/xxx)
    INFERNAL_OLDRELEASE_NOTEBOOK  The e-notebook dir used for last release ({HOME}/notebook/xxx)

  Having these set everywhere, in all the ssh'ing you're about to 
  do, simplifies the scripting below, and reduces the odds of 
  cut/paste errors.

   . ~/.bashrc

* Update the User guide (do this in your git repo, at NCBI, where you
  can build it).

  - Update version numbers in the installation section.
  - make a new directory $INFERNAL_RELEASE_NOTEBOOK/uguide and do the
    tutorial excercises, compare with info in
    $INFERNAL_OLDRELEASE_NOTEBOOK/uguide
  - Search all .tex documents for old version and update as necessary.
  - Commit and push all changes.

================================================================
= Creating a source distribution
================================================================

Before starting this step, you should be fairly confident that the
code is ready for release. You should have already done the normal
testing (make; make dev; make check; make devcheck;) in your local git
repo.

${INFERNAL_VERSION}, ${EASEL_VERSION}, and ${HMMER_VERSION} tags used
below should match @INFERNAL_VERSION@, @EASEL_VERSION@ and
@HMMER_VERSION@ in configure.ac, Makefile.

* cd $INF/releases
# this used to be ~/releases, but my home dir is so small at NCBI, I
# use a different dir

* Delete any old releases of the same number
   rm -rf infernal-${INFERNAL_VERSION}
   rm -f  infernal-${INFERNAL_VERSION}.tar
   rm -f  infernal-${INFERNAL_VERSION}.tar.gz

* Clone from git and checkout release branches
  ssh cbbdev21
  git clone https://github.com/EddyRivasLab/infernal.git infernal-${INFERNAL_VERSION}
  cd infernal-${INFERNAL_VERSION}
  git checkout release-${INFERNAL_VERSION}

  git clone https://github.com/EddyRivasLab/hmmer.git
# checkout a release branch if nec, otherwise just leave at master

  git clone https://github.com/EddyRivasLab/easel.git
# checkout a release branch if nec, otherwise just leave at master

# don't autoconf in hmmer and easel, hmmer-3.3 did not have a
# configure in easel/, so I followed that

  autoconf
  ./configure; 
  . release-notes/LICENSE.sh
# Note that we *leave* the easel symlink in hmmer that 'configure' just
# created, we would *not* want to do this if we were using the
# 'h' tar flag below to make a tarball without symlinks for windows
# compatability but we abandoned that in 1.1.3.

* Check that git has file permissions right. 
  Both of these should have no output.
   find . ! -perm -u+r -print
   find . -perm o+x ! -perm -u+x -print

* versioning, dating, licensing (these are originally set in
  configure.ac, and exported as shell variables by LICENSE.sh call
  above, make sure they're correct using echo before proceeding)

   echo ${INFERNAL_VERSION}
   echo ${EASEL_VERSION}
   echo ${HMMER_VERSION}
   echo ${INFERNAL_DATE}
   echo ${HMMER_DATE}
   echo ${EASEL_DATE}
   echo ${INFERNAL_COPYRIGHT}
   echo ${HMMER_COPYRIGHT}
   echo ${EASEL_COPYRIGHT}

* As of 1.1.3, no longer necessary to do analogous commands for hmmer
  and easel, these are handled by AC_CONFIG_FILES() calls in configure.ac.
  I should make the analogous changes for infernal, but currently (as of 
  1.1.3) we still use the sedition method below:

   easel/devkit/sedition INFERNAL_VERSION ${INFERNAL_VERSION} INFERNAL_DATE "${INFERNAL_DATE}" INFERNAL_COPYRIGHT "${INFERNAL_COPYRIGHT}" README
   easel/devkit/sedition INFERNAL_VERSION ${INFERNAL_VERSION} INFERNAL_DATE "${INFERNAL_DATE}" INFERNAL_COPYRIGHT "${INFERNAL_COPYRIGHT}" INSTALL
   easel/devkit/sedition INFERNAL_VERSION ${INFERNAL_VERSION} INFERNAL_DATE "${INFERNAL_DATE}" INFERNAL_COPYRIGHT "${INFERNAL_COPYRIGHT}" release-notes/LICENSE.tag
   find .     -type f -exec easel/devkit/sedition-pp LICENSE release-notes/LICENSE.tag {} \;
   # final command above takes a minute or so

   cd documentation/manpages/
   for manpage in *.man; do \
     ../../easel/devkit/sedition INFERNAL_VERSION ${INFERNAL_VERSION} INFERNAL_DATE "${INFERNAL_DATE}" INFERNAL_COPYRIGHT "${INFERNAL_COPYRIGHT}" INFERNAL_LICENSE "${INFERNAL_LICENSE}" INFERNAL_URL "${INFERNAL_URL}" $manpage;\
   done
   cd ../..

* compile documentation
   cd documentation/userguide
   chmod +x ../../easel/devkit/rmanprocess.pl
   make
   mv Userguide.pdf ../../Userguide.pdf
   cd ../..
   cp Userguide.pdf $FTPDIR/test.pdf

Download test.pdf and look at it.   

* clean up files that don't belong in the distro, 
  IMPORTANTLY INCLUDING THE .git SUBDIRS IN INFERNAL, HMMER AND EASEL

  Note: after 1.1rc1, we changed this part: documentation/userguide
  in infernal and hmmer, and documentation/ in easel are no longer
  removed. Their Makefile.in's have been updated to check for req'd
  executables before building the guide. They were originally removed
  b/c Sean didn't want users going in there, running make, failing
  with many errors due to missing executables, and reporting bugs to
  us.

   make distclean
   cp   release-notes/RELEASE-${INFERNAL_VERSION}.md .
   rm -rf .git
   rm -rf Bugs
   rm -rf Manuscripts
   rm -rf release-notes
   rm -rf autobuild

CHECK FOR ANY WEIRD conf*** (e.g. confQy52wQ) directories, and delete if you find them
this burned me in 1.1.2 release.

   # Check latest hmmer release and see what directories are saved in
   # that release and mirror that her
   cd hmmer
   rm -rf .git
   rm -rf contrib
   rm -rf release-notes
   rm -rf autobuild

   # Check latest hmmer release's easel subdir and see what
   # directories are saved in that release and mirror that her
   cd ../easel
   rm -rf .git
   cd ..

   rm *~

* record and finish release notes
  (Sean's command in HMMER that I skipped because I'm not sure what it
  does: cat RELEASE-NOTES | dumpnotes )
    
   emacs RELEASE-{$INFERNAL_VERSION}.md
   rm *~
Delete TO-DO sections and clean up for public consumption.

  (Again, not sure of this command that Sean uses for hmmer: 'texclean')

* package
* For 1.1.2 we used the 'h' option with the 'tar' command below
* to dereference the symlinks, but in 1.1.3 we left them in because
* two hmmer testsuite exercises required them. 
* Windows systems can't deal w/ symlinks, we're told.
* I plan to work around this if/when I make a cygwin binary distro.

   cd ..
   tar cvf infernal-${INFERNAL_VERSION}.tar infernal-${INFERNAL_VERSION}
   gzip infernal-${INFERNAL_VERSION}.tar
   cp infernal-${INFERNAL_VERSION}.tar.gz $FTPDIR/test.tar.gz

   1.1rc1: 11.7 Mb (gzipped)
   1.1rc2: 19.1 Mb (gzipped, diff b/c of documentation directories)
   1.1rc3: 19.2 Mb (gzipped)
   1.1rc4: 19.2 Mb (gzipped)
   1.1:    19.2 Mb (gzipped)
   1.1.1:  19.5 Mb (gzipped) added large testsuite/bug-i43.cm file
   --- git flow ---
   1.1.2:  19.4 Mb (gzipped)
   1.1.3:  29.9 Mb (gzipped)

All subsequent tests are on this source distro.

At this point it makes sense to try to make the binary distros,
because they are the only stage that checks 'make install'. If you
wait until the end and see a problem with 'make install' you have to
restart from the beginning (which happened for 1.1.3), so it's better
to try now so you notice those problems early.

================================================================
= Build for testing
================================================================

We'll build two sets of the executables on cbbdev** for testing
(build-gcc-mpi and build-icc), for which we'll run tests locally
(tests-fast.sh) and on the compute farm (tests-slow.sh).

On cbbdev21 (our compile host):
  ssh cbbdev21
  cd $INF/releases/infernal-${INFERNAL_VERSION}
  mkdir build-gcc-mpi

  cd build-gcc-mpi
  ../configure --enable-mpi > build.out   2>&1
  make            >> build.out	 2>&1
  make dev        >> build.out	 2>&1
  make check      >> build.out	 2>&1
  make devcheck   >> build.out	 2>&1

1 line: ../configure --enable-mpi > build.out 2>&1; make >> build.out 2>&1; make dev >> build.out 2>&1; make check >> build.out 2>&1; make devcheck >> build.out 2>&1

  ssh cbbdev21
  cd $INF/releases/infernal-${INFERNAL_VERSION}
  mkdir build-icc
  cd build-icc
  ../configure CC=icc > build.out  2>&1
  make            >> build.out  2>&1
  make dev        >> build.out  2>&1
  make check      >> build.out  2>&1
  make devcheck   >> build.out  2>&1

1 line: ../configure CC=icc > build.out 2>&1; make >> build.out 2>&1; make dev >> build.out 2>&1; make check >> build.out 2>&1; make devcheck >> build.out 2>&1

================================================================
= Testing
================================================================

See latest e-notebook for tests.

It's good to start the tests at this stage, because they are the
slowest part of the release 00CHECKLIST. When you hit a point where
you're waiting, move onto to the next section -- building and testing
on the compile farm.

Current testing is three sets of jobs, see old notebook 00LOG. 

tests-fast.sh:          fast enough to run in succession.
tests-fast-valgrind.sh: same tests as tests-fast.sh but valgrind
tests-slow.sh:          submit to cluster, includes MPI jobs.

Output tests-fast.sh and tests-fast-valgrind.sh to a file, and
manually look at each line for errors. 

These instructions should work post-1.1rc2:

Set up tests:
  ssh cbbdev21
  cd ${INFERNAL_RELEASE_NOTEBOOK}
  mkdir tests
  mkdir tests/out-files/
  mkdir tests/err-files/
  mkdir tests/out-oldversion-files/
  mkdir tests/err-oldversion-files/
  cd tests
  cp ${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/cp-required-files.sh ./
  sh cp-required-files.sh

Run tests:
tests-fast*.sh          run on cbbdev21,                 takes about 1 minute
tests-fast-valgrind*.sh run valgrind tests on cbbdev21,  takes about 30 minutes
tests-slow*.sh          submit to compute farm,          takes about 2.5 hours

***FOR FIRST RELEASE POST 1.1.3, ADD NEW TESTS ADDED IN 1.1.3 
***(diff between tests-fast.sh and tests-fast-oldversion.sh
*** and tests-fast-valgrind.sh and tests-fast-valgrind-oldversion.sh)
***to *oldversion* versions prior to running oldversion tests so that
***they are executed for the old version (which will be 1.1.3)

  time sh tests-fast.sh > tests-fast.out
  time sh tests-fast-oldversion.sh > tests-fast-oldversion.out
  diff tests-fast.out tests-fast-oldversion.out > tests-fast.diff

  sh run-valgrind.sh  

Takes about 1 hour. Note run-valgrind does not run jobs in parallel
because current and old version tests create and use files of the same
name.  

Look at err-files/valg.1.err and make sure there's no memory
leaks or errors. Ensure line count from the greps are all the same.

  grep "ERROR SUMMARY" err-files/valg.1.err | nl
  grep "ERROR SUMMARY" err-files/valg.1.err | grep " 0 errors from 0 contexts (suppressed: 0 from 0)" | wc -l
  grep "in use at exit" err-files/valg.1.err | nl
  grep "total heap usage" err-files/valg.1.err | nl
  grep "All heap blocks were freed -- no leaks are possible" err-files/valg.1.err | nl

  diff tests-fast-valgrind.out tests-fast-valgrind-oldversion.out > tests-fast-valgrind.diff
  sh tests-slow.sh
  sh tests-slow-oldversion.sh 

Wait for these to finish (about 3 hours)
  sh regressify-slow.sh 
  sh regressify-slow-oldversion.sh
  sh diff-slow.sh > tests-slow.diff

Make sure all diff output includes only expected differences.
  emacs tests-fast.diff
  emacs tests-fast-valgrind.diff
  emacs tests-slow.diff

Make sure all err-files/* and err-oldversion-files/* (besides valg.*err) are empty.

Remember to test on both builds (gcc-mpi and icc), the scripts above
already do this, except for the valgrind ones.

Then run some anecdotal tests.
     mkdir anecdotes
Some examples:
     cd anecdotes
     $INF/releases/infernal-${INFERNAL_VERSION}/build-gcc-mpi/src/cmfetch ~/db/rfam/rfam_12.1/Rfam.cm 5S_rRNA > 5S.cm
     $INF/releases/infernal-${INFERNAL_OLDVERSION}/build-gcc-mpi/src/cmfetch ~/db/rfam/rfam_12.1/Rfam.cm 5S_rRNA > 5S.old.cm
     diff 5S.cm 5S.old.cm
     $INF/releases/infernal-${INFERNAL_VERSION}/build-gcc-mpi/src/cmstat 5S.cm
     $INF/releases/infernal-${INFERNAL_VERSION}/build-gcc-mpi/src/cmstat 5S.old.cm
     $INF/releases/infernal-${INFERNAL_VERSION}/build-gcc-mpi/src/cmsearch 5S.cm $INF/db/other-genomes/hvol.fa
     $INF/releases/infernal-${INFERNAL_OLDVERSION}/build-gcc-mpi/src/cmsearch 5S.cm $INF/db/other-genomes/hvol.fa
     $INF/releases/infernal-${INFERNAL_VERSION}/build-gcc-mpi/src/cmpress 5S.cm
     $INF/releases/infernal-${INFERNAL_OLDVERSION}/build-gcc-mpi/src/cmpress 5S.old.cm
     $INF/releases/infernal-${INFERNAL_VERSION}/build-gcc-mpi/src/cmscan 5S.cm $INF/db/other-genomes/hvol.fa
     $INF/releases/infernal-${INFERNAL_VERSION}/build-gcc-mpi/src/cmscan 5S.old.cm $INF/db/other-genomes/hvol.fa
     $INF/releases/infernal-${INFERNAL_VERSION}/build-gcc-mpi/src/cmsearch -A 5S.sto 5S.cm $INF/db/other-genomes/hvol.fa
     $INF/releases/infernal-${INFERNAL_VERSION}/build-gcc-mpi/easel/miniapps/esl-reformat fasta 5S.sto > 5S.fa
     $INF/releases/infernal-${INFERNAL_VERSION}/build-gcc-mpi/src/cmalign 5S.cm 5S.fa 

Also, do a rmark3 benchmark with default settings and --mid for
both new and old versions.	      
(These commands should work post-i1.1rc2 if you're doing a small
update release)

     cd ${INFERNAL_RELEASE_NOTEBOOK}/tests/
     mkdir rmark3
     cd rmark3
     mkdir models

     cp ${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/rmark3/rmark3.msa ./
     cp ${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/rmark3/fetch.sh ./
     cp ${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/rmark3/build.sh ./
     cp ${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/rmark3/calibrate.sh ./
     sh fetch.sh
     sh build.sh
Wait for all jobs to finish (about 1 minute)
     sh calibrate.sh
Wait for all jobs to finish (about 30 minutes, if cluster is nearly empty)
     cat models/*.cm > models/rmark3.cm     

     cp ${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/rmark3/rmark3* ./
     cp ${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/rmark3/df.opts ./
     cp ${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/rmark3/mid.opts ./
     cp ${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/rmark3/do-symlink.sh ./
     cp ${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/rmark3/do-all.sh ./
     cp ${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/rmark3/do-pp.sh ./
     cp ${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/rmark3/tmp-rmark-master.pl ./

NOTE: as of 1.1, do-all.sh won't work as written b/c it's set-up 
for Janelia's cluster. That's why we copy 
${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/rmark3/tmp-rmark-master.pl 
and use that

     sh do-symlink.sh
     sh do-all.sh 
Wait for jobs to finish (approximately 20 min)

NOTE: as of 1.1rc3, the do-pp.sh won't work out of the box. You'll
need to copy the 'rmark-rocplot' executable from a build dir into the
rmark directory, because rmark-pp.sh expects all the rmark scripts to
be in the same dir, then delete it when we're done with it:

     cp $INF/releases/infernal-${INFERNAL_VERSION}/build-gcc-mpi/rmark/rmark-rocplot $INF/releases/infernal-${INFERNAL_VERSION}/rmark/
     sh do-pp.sh 
Wait for jobs to finish (approximately 5 min)
     rm $INF/releases/infernal-${INFERNAL_VERSION}/rmark/rmark-rocplot
      
Compare the old and current .sum files.
and with the .sum files in ${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/rmark3/	 

Check the userguide (Userguide.pdf).
    cp $INF/releases/infernal-${INFERNAL_VERSION}/Userguide.pdf ${INFERNAL_RELEASE_NOTEBOOK}/tests/

================================================================
= Build and check on all compile farm nodes
================================================================
CURRENTLY WE HAVE NO COMPILE FARM

What I'll do is test it on the following:
cbbdev21
my Mac Desktop
ody (Harvard)
EBI 
Mac laptop

One issue is that these are all different file systems, whereas I used
to do (at Janelia) the compile farm tests from one directory because
the file system was shared.

For here, I'll actually copy the src tarball (via public ftp site):

First put it on the ftp site, and call it test.tar.gz, out of an
abundance of caution that an untested tarball gets out
  ssh cbbdev21
  cp $INF/releases/infernal-${INFERNAL_VERSION}.tar.gz $FTPDIR/test.tar.gz  
  
Then go onto the computer you are going to test on, and in a notebook
subdirectory (e.g. 19_1108_inf_1p1p3_release/test-install/)
  curl -k -L -o test.tar.gz http://ftp.ncbi.nlm.nih.gov/pub/nawrocki/test.tar.gz
  tar xvfz test.tar.gz
  cd infernal-1.1.3

Then build and run tests:

  ./configure > build.out 2>&1
  make >> build.out 2>&1
  make dev >> build.out 2>&1
  make check >> build.out 2>&1
  make devcheck >> build.out 2>&1

1line: ./configure > build.out 2>&1;make >> build.out 2>&1;make dev >> build.out 2>&1;make check >> build.out 2>&1;make devcheck >> build.out 2>&1;

  Check build.out 

  Then do some anecdotal tests, possibly from the tutorial.

  Then make sure that this works:

  make clean

Then do the same in hmmer and easel (to test those 'release'
versions). Actually do this by removing the src distro, unpacking it
again, and redoing for hmmer and then easel. For hmmer, in 1.1.2 we
copied all the easel files into hmmer (with 'cp -r ../easel ./easel'),
but in 1.1.3 we just use the existing symlink and so skip that step.
Note we also have to build the configure script with 'autoconf'.

This step is just to be extra careful about the hmmer and easel
packages. If they're already releases, it may not be necessary.

   
Do hmmer:
   cd ..
   rm -rf infernal-1.1.3
   tar xvfz test.tar.gz
   cd infernal-1.1.3/hmmer
   autoconf
   sh ./configure > build.out 2>&1
   make >> build.out 2>&1
   make dev >> build.out 2>&1
   make check >> build.out 2>&1
   
1line: sh ./configure > build.out 2>&1; make >> build.out 2>&1; make dev >> build.out 2>&1; make check >> build.out 2>&1;

 check build.out
 run anecdotal tests
   make clean

And finally easel:
   cd ../..
   rm -rf infernal-1.1.3
   tar xvfz test.tar.gz
   cd infernal-1.1.3/easel
   autoconf
   sh ./configure > build.out 2>&1
   make >> build.out 2>&1
   make dev >> build.out 2>&1
   make check >> build.out 2>&1

1line: sh ./configure > build.out 2>&1; make >> build.out 2>&1; make dev >> build.out 2>&1; make check >> build.out 2>&1;

 check build.out
 run anecdotal tests
   make clean

For first post-1.1.3 release, try compiling with icc on odyssey
using "./configure CC=icc" when configuring.
When I tried that for 1.1.3, I got a configure error:
configure: ::::::::::--- no vector instruction set ---::::::::::
configure: HMMER3 requires SSE or VMX vector instructions.
configure: Supported platforms are x86 (Intel/AMD) and PowerPC.
configure: error: No supported vectorization found for your machine.

              inf  hmmer easel              
macbook pro   pass pass  fail(1-avx)
cbbdev21      pass pass  fail(1-avx)
ebi           pass pass  pass
ody-gcc       pass pass  pass
ncbimac       pass pass  pass

*** Save build.out output for each build (infernal/hmmer/easel) in top
*** level directories in each notebook dir on each host,
*** e.g. infernal.build.out, hmmer.build.out, easel.build.out.

================================================================
= Binary distros
================================================================

  cd ${INFERNAL_RELEASE_NOTEBOOK}
  mkdir Distros; cd Distros

Note: the configure call differs from the one Sean uses in hmmer. I
specify --prefix. If I don't do that I get a 'make install' error
because I don't have permission to change the permissions on the man
directory. 

Two or three builds:
  linux-intel-gcc
  macosx-intel
  cygwin (POSTPONED UNTIL AFTER INITIAL 1.1.3 RELEASE, IF AT ALL)

linux-intel-gcc:
  ssh cbbdev21
  export INFERNAL_DISTRO=linux-intel-gcc
  cd ${INFERNAL_RELEASE_NOTEBOOK}/Distros
  tar zxf $INF/releases/infernal-${INFERNAL_VERSION}.tar.gz
  mv infernal-${INFERNAL_VERSION} infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}
  cd infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}
  mkdir binaries

  mkdir build-${INFERNAL_DISTRO}
  cd build-${INFERNAL_DISTRO}
  ../configure \
   --bindir=${INFERNAL_RELEASE_NOTEBOOK}/Distros/infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}/binaries \
   --prefix=${INFERNAL_RELEASE_NOTEBOOK}/Distros/infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO} \
   > ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-${INFERNAL_DISTRO}.out  2>&1
  make                             >> ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-${INFERNAL_DISTRO}.out   2>&1
  make dev                         >> ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-${INFERNAL_DISTRO}.out   2>&1
  make check                       >> ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-${INFERNAL_DISTRO}.out   2>&1
  make install                     >> ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-${INFERNAL_DISTRO}.out   2>&1
  (cd easel/miniapps; make install >> ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-${INFERNAL_DISTRO}.out   2>&1)

Look at build-${INFERNAL_DISTRO}.out

Previously we removed the 'share' subdir, but Userguide explains to readers that man pages will be in share/man/man1/
so we leave it.

  cd ..
  rm -rf build-${INFERNAL_DISTRO}
***LOOK FOR WEIRD conf*** DIRS FILES AND DELETE THEM IF THEY EXIST 
  cd .. 
***NOTE DO NOT USE 'h' FLAG (WE DID IN 1.1.2, BUT NOT IN 1.1.3, SEE NOTE ABOVE (SEARCH FOR 'h')***
  tar cf infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}.tar  infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}
  gzip infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}.tar

macosx-intel build (on my Mac Desktop):
NOTE: we build this in your home dir, NOT in $INF
That means you'll have two Distros subdirs, which can get confusing.
We need to build in home dir at NCBI because your desktop can't
access $INF.

You'll need to update the release notebook dir here next release
Note the 'local', this is because I can only access my home dir from 
my desktop, not $INF
on cbbdev21
  cp $INF/releases/infernal-${INFERNAL_VERSION}.tar.gz ~/releases/  

on mac desktop:
  export INFERNAL_DISTRO=macosx-intel
  export INFERNAL_RELEASE_NOTEBOOK=$UH/notebook/19_1108_local_inf_1p1p3_release
  export INFERNAL_VERSION=1.1.3

  cd ${INFERNAL_RELEASE_NOTEBOOK}
  mkdir Distros
  cd Distros
  tar zxf $UH/releases/infernal-${INFERNAL_VERSION}.tar.gz
  mv infernal-${INFERNAL_VERSION} infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}
  cd infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}
  mkdir binaries

  mkdir build-${INFERNAL_DISTRO}
  cd build-${INFERNAL_DISTRO}
  ../configure --bindir=${INFERNAL_RELEASE_NOTEBOOK}/Distros/infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}/binaries \ 
    --prefix=${INFERNAL_RELEASE_NOTEBOOK}/Distros/infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO} \ 
    > ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-${INFERNAL_DISTRO}.out  2>&1
  make                             >> ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-${INFERNAL_DISTRO}.out   2>&1
  make dev                         >> ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-${INFERNAL_DISTRO}.out   2>&1
  make check                       >> ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-${INFERNAL_DISTRO}.out   2>&1
  make install                     >> ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-${INFERNAL_DISTRO}.out   2>&1
  (cd easel/miniapps; make install >> ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-${INFERNAL_DISTRO}.out   2>&1)

Look at build-${INFERNAL_DISTRO}.out

Previously we removed the share subdir, but Userguide explains to readers that man pages will be in share/man/man1/
so we leave it.

  cd ..
  rm -rf build-${INFERNAL_DISTRO}
***LOOK FOR WEIRD conf*** DIRS FILES AND DELETE THEM IF THEY EXIST 
  cd .. 
***NOTE DO NOT USE 'h' FLAG (WE DID IN 1.1.2, BUT NOT IN 1.1.3, SEE NOTE ABOVE (SEARCH FOR 'h')***
  tar cf infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}.tar  infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}
  gzip infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}.tar

Copy to $INF notebook from home dir notebook:
On cbbdev:
  cp -r PATH-TO-HOME-INFERNAL-NOTEBOOK-DIR/Distros/* ${INFERNAL_RELEASE_NOTEBOOK}/Distros/


POSTPONED UNTIL AFTER 1.1.3 RELEASE, IF AT ALL:
YOU'LL NEED TO UPDATE THIS AS YOU GO, I DON'T THINK IT'S
BEEN UPDATED SINCE 1.1.1.
cygwin (on a Windows VM):
  Copy tarball of src release to ssh.janelia.org so I can get it onto my cygwin virtual machine
    scp ~/releases/infernal-${INFERNAL_VERSION}.tar.gz nawrockie@ssh.janelia.org:~/

  Open up VM entitled 'IE11 - Win7' on MacBook pro via VirtualBox, see Nov 12 email from
    Travis Wheeler to my gmail address, or notes in 13_1205_inf_1p1_windows_cygwin/00LOG'
  
  (NOTE: this was done without variables, and was
   done on my MacBook pro in a windows VM)
  
  from cygwin home:
  cd ~/notebook/13_1205_inf_1p1_windows_cygwin
  pwd
    /home/IEUser/notebook/14_0723_inf_1p1p1_cygwin
  mkdir Distros
  cd Distros
  scp nawrockie@ssh.janelia.org:~/infernal-1.1.1.tar.gz .

  gunzip infernal-1.1.1.tar.gz
  tar xf infernal-1.1.1.tar
  mv infernal-1.1.1 infernal-1.1.1-cygwin
  cd infernal-1.1.1-cygwin
  mkdir build-cygwin
  cd build-cygwin
  ../configure \
   --bindir=/home/IEUser/notebook/14_0723_inf_1p1p1_cygwin/Distros/infernal-1.1.1-cygwin/binaries \
   --prefix=/home/IEUser/notebook/14_0723_inf_1p1p1_cygwin/Distros/infernal-1.1.1-cygwin \
   > /home/IEUser/notebook/14_0723_inf_1p1p1_cygwin/Distros/build-infernal-1.1.1-cygwin.out

  make          >> /home/IEUser/notebook/14_0723_inf_1p1p1_cygwin/Distros/build-infernal-1.1.1-cygwin.out 2>&1
  make dev      >> /home/IEUser/notebook/14_0723_inf_1p1p1_cygwin/Distros/build-infernal-1.1.1-cygwin.out 2>&1
  make check    >> /home/IEUser/notebook/14_0723_inf_1p1p1_cygwin/Distros/build-infernal-1.1.1-cygwin.out 2>&1
  make install  >> /home/IEUser/notebook/14_0723_inf_1p1p1_cygwin/Distros/build-infernal-1.1.1-cygwin.out 2>&1
  (cd easel/miniapps; make install >> /home/IEUser/notebook/14_0723_inf_1p1p1_cygwin/Distros/build-infernal-1.1.1-cygwin.out 2>&1)
  rm -rf /home/IEUser/notebook/14_0723_inf_1p1p1_cygwin/Distros/infernal-1.1.1-cygwin/share

 Look at build-infernal-1.1.1-cygwin.out.

  cd ..
  rm -rf build-cygwin
  cd .. 

 Add a 00README-cygin-binaries.txt file to the binaries/ dir. See the
 one I made in Dec 2013 for v1.1 as an example.   

  emacs binaries/00README-cygwin-binaries.txt
  tar cfh infernal-1.1.1-cygwin.tar  infernal-1.1.1-cygwin
  gzip infernal-1.1.1-cygwin.tar
  
Look at the build output for these three distros and make sure
everything looks normal and all tests pass:
  emacs ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-linux-intel-gcc.out
  emacs ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-macosx-intel.out
  ON MACBOOK PRO:
    emacs notebook/14_0723_inf_1p1p1_cygwin/Distros/build-infernal-1.1.1-cygwin.out

--------
Test these Distro tarballs:

linux-intel-gcc: ${INFERNAL_RELEASE_NOTEBOOK}/Distros/infernal-${INFERNAL_VERSION}-linux-intel-gcc.tar.gz
macosx-intel:    ${INFERNAL_RELEASE_NOTEBOOK}/Distros/infernal-${INFERNAL_VERSION}-macosx-intel.tar.gz
cygwin:          notebook/14_0723_inf_1p1p1_cygwin/Distros/infernal-1.1.1-cygwin.tar.gz

Copy linux-intel-gcc to a new directory at NCBI
and test it with some anecdotal tets.
Copy macosx-intel tar ball to your laptop and desktop and test it.
Copy cygwin to another virtual machine or windows machine and test it.

================================================================
= Distribution
================================================================

* copy to ftp site 

    We can do this by copying it to our local copy of Sean's
    eddylab.org and infernal.org git repos:

    eddylab.org is on odyssey:
    /n/eddyfs01/gitrepo/eddylab.org.git

    infernal.org is on github:
    https://github.com/EddyRivasLab/infernal.org

    cd $INF/eddylab.org
    (Or checkout new working copy of Sean's website with:
     'git clone nawrocke@ody:/n/eddyfs01/gitrepo/eddylab.org.git'
     After setting up your ~/.ssh/config file as explained here:
     https://rc.fas.harvard.edu/resources/documentation/linux/using-ssh-controlmaster-for-single-sign-on/)

     cd $INF/eddylab.org/site/software/infernal
     cp $INF/releases/infernal-${INFERNAL_VERSION}/README ./
     cp $INF/releases/infernal-${INFERNAL_VERSION}/RELEASE-1.1.3.md ./
     cp $INF/releases/infernal-${INFERNAL_VERSION}/LICENSE ./
     cp $INF/releases/infernal-${INFERNAL_VERSION}/Userguide.pdf ./
     cp $INF/releases/infernal-${INFERNAL_VERSION}.tar.gz ./
     cp ${INFERNAL_RELEASE_NOTEBOOK}/Distros/infernal-${INFERNAL_VERSION}-linux-intel-gcc.tar.gz  ./
     cp ${INFERNAL_RELEASE_NOTEBOOK}/Distros/infernal-${INFERNAL_VERSION}-macosx-intel.tar.gz ./

   Remove the old release notes:
     git rm $INF/releases/infernal-${INFERNAL_VERSION}/RELEASE-xxx

     rm infernal.tar.gz 
     ln -s infernal-1.1.3.tar.gz infernal.tar.gz

   Update index.html, which is in a different directory:
     cd $INF/infernal.org/
   update index.html    

     - search for all instances of the version (e.g. 1.1.2)
       and update them.
     - consider updating Further Reference with any new papers related
       to Infernal/Rfam

   Add everything to git and commit it, and push it.

   Email Sean and ask him to do a 'make' on the website.

   Review the website once Sean has performed a 'make'.

====================================================================
= git: finalizing release branches and merging to develop and master
====================================================================

Once you're convinced you're done, all tests pass and src and binary
distros created and tested, we can finalize with git:

You'll want a fresh git repo to work in, so follow the instructions in 
Creating a source distribution to clone and switch branches, but do 
it into $INF/releases/infernal-release instead of
$INF/releases/infernal-${INFERNAL_VERSION}, like so:

   cd $INF/releases 
   rm -rf infernal-release

   ssh cbbdev21
   git clone https://github.com/EddyRivasLab/infernal.git infernal-release
   cd infernal-release
   git checkout release-${INFERNAL_VERSION}

   git clone https://github.com/EddyRivasLab/easel.git
# checkout release branch if necessary, not necessary for 1.1.3

   git clone https://github.com/EddyRivasLab/hmmer.git
# checkout release branch if necessary, not necessary for 1.1.3

 If you need to make easel and/or hmmer releases, you need to merge
 their release branches and make the releases, if not skip to infernal
 section below

 ~~~~~~~~~~~~~~~~~~~~~~~
 Below when merging, you may get conflicts.   
 If you get conflicts in file x when you merge:
 - fix the conflicts in file x
 - git add x
 - git commit -m "Fixed conflicts in x"
 POSSIBLY CHECK WITH SEAN/TRAVIS TO MAKE SURE IT'S OKAY IF YOU PUSH
 THE SPECIFIC CHANGES YOU JUST MADE
 - git push
 ~~~~~~~~~~~~~~~~~~~~~~~

 Easel, if you need to make a release:
   cd $INF/releases/infernal-release/easel
   git checkout master
   git merge --no-ff release-0.43 -m "Merges release-0.43 into master"
   git tag -a easel-0.43
   git push origin easel-0.43

 Switch to develop and merge their too
   git checkout develop
   git merge --no-ff release-0.43 -m "Merges release-0.43 into develop"
   git push

 Delete release branch (if ready):
   git branch -d release-0.43
   git push origin --delete release-0.43
   
 HMMER, if you need to make a release
   cd $INF/releases/infernal-release/hmmer
   git checkout master 
   git merge --no-ff release-3.1b3 -m "Merges release-3.1b3 into master"
   git tag -a hmmer-3.1b3
   git push origin hmmer-3.1b3

 Switch to develop and merge their too
   git checkout develop
   git merge --no-ff release-3.1b3 -m "Merges release-0.3.1b3 into develop"
   git push

 Delete release branch (if ready):
   git branch -d release-3.1b3
   git push origin --delete release-3.1b3

 --
 Pick up here if you needed to make hmmer/easel releases or not:

 Tag infernal release in hmmer and easel:

   cd $INF/releases/infernal-release/easel
   git checkout master
   git tag -a -m "Tags easel 0.46 for infernal-1.1.3 release" infernal-1.1.3
   git push origin infernal-1.1.3

   cd $INF/releases/infernal-release/hmmer
   git tag -a -m "Tags hmmer 3.3 for infernal-1.1.3 release" infernal-1.1.3
   git push origin infernal-1.1.3

 Now for Infernal:

   cd $INF/releases/infernal-release
   git checkout master
   git merge --no-ff release-1.1.3 -m "Merges release-1.1.3 into master"
   git tag -a infernal-1.1.3
   git push origin infernal-1.1.3
   git push

Now merge release branch back to develop:
   git checkout develop
   git merge --no-ff release-1.1.3 -m "Merges release-1.1.3 into develop"
   git push
   git branch -d release-1.1.3
   git push origin --delete release-1.1.3

Then email Sean and tell him to do a 'make' for the website.

And possibly update the github wiki's 'release' sections based on what
you learned during the release.

Release history
---------------
0.3    - SRE, Thu Jul  4 10:27:16 2002
0.5    - SRE, Sun Oct  6 14:22:47 2002
0.51   - SRE, Wed Oct  9 09:43:50 2002
0.52   - SRE, Mon Oct 14 2002
0.53   - SRE, Thu Jan  2 14:24:07 2003
0.54   - SRE, Sun Jan  5 18:17:55 2003
0.55   - SRE, Wed Apr  2 18:12:23 2003   r875
0.6    - SRE, Tue Nov  1 17:13:00 2005   r1477  Easel:r72
0.7    - SRE, Tue Dec 13 14:54:30 2005   r1534  Easel:r84
0.71   - SRE, Thu Nov 30 11:43:57 2006   r1730  Easel:r142
0.72   - SRE, Sat Jan 27 10:44:46 2007   r1862  Easel:r149
0.8    - SRE, Sun Apr 29 11:55:56 2007   r1984  Easel:r176
0.81   - SRE, Tue May  1 10:36:10 2007   r1995  Easel:r179
1.0rc1 - SRE, Fri Jun 20 13:38:46 2008   r2492  Easel:r276
1.0rc2 - SRE, Sat Jul 12 09:26:29 2008   r2502  Easel:r280
1.0rc3 - SRE, Wed Sep 24 14:33:59 2008   r2596  Easel:r294
1.0rc4 - SRE, Mon Nov 24 17:43:07 2008   r2635  Easel:r304
1.0rc5 - SRE, Wed Dec 17 17:59:01 2008   r2673  Easel:r310
1.0    - SRE, Tue Jan 13 14:33:16 2009   r2710  Easel:r317
1.0.1  - SRE, Sat Oct 24 10:12:50 2009   r2997  Easel:r422
1.0.2  - SRE, Fri Oct 30 13:57:33 2009   r3022  Easel:r428
1.1rc1 - EPN, Wed Jun 27 22:02:39 2012   r4131  Easel:r775
1.1rc2 - EPN, Fri Dec 14 15:04:24 2012   r4343  Easel:r835
1.1rc3 - EPN, Tue Jun 11 05:55:39 2013   r4479  Easel:r872
1.1rc4 - EPN, Wed Jun 26 14:17:19 2013   r4499  Easel:r875
1.1    - EPN, Thu Oct 31 13:42:20 2013   r4549  Easel:r890
1.1.1  - EPN, Wed Jul 23 11:11:49 2014   r4711  Easel:r918
---- git flow ----
1.1.2  - EPN, Fri Jul  1 23:08:39 2016   HMMER:3.1b3 Easel:0.43
1.1.3  - EPN, Tue Nov 19 16:01:07 2019   HMMER:3.3   Easel:0.46

