Checklist for an Infernal release.
EPN, Fri Jun 24 10:17:16 2016

Updated for 1.1.2 release, based partly on SSU-ALIGN 0.1.1's 00CHECKLIST
-------------------------------------

Git repositories:       https://github.com/EddyRivasLab/infernal.git

                        https://github.com/EddyRivasLab/hmmer.git

                        https://github.com/EddyRivasLab/easel.git

See instructions on how to do a release using the lab's git flow
strategy here: 

https://github.com/EddyRivasLab/infernal/wiki

And these pages may also be helpful:
https://github.com/EddyRivasLab/hmmer/wiki
https://github.com/EddyRivasLab/easel/wiki

==========================
= Creating a new release =
==========================

1. Announce intent to release to all developers.

2. Create release branches of easel, hmmer and infernal.

   See https://github.com/EddyRivasLab/infernal/wiki
   ## **Making a release**

   NOTE FOR THE 1.1.2 and 1.1.3 RELEASES I DID NOT FOLLOW THIS
   EXACTLY:
   instead of finalizing the hmmer and easel releases completely
   before the 1.1.2 release, I waited until I was sure that 
   Infernal 1.1.2 was good to go, then I finalized those releases
   (merged to master and develop). 
   See the notes below for details.

   - create easel release branch

     $ cd easel
     $ git checkout develop

     # make sure develop is up to date with master (should be 0 or 1
     # commit behind master (I think it's impossible to have them
     # exactly even...)) via github

     $ git checkout -b release-0.43 develop

     # bump version and release date in configure.ac
     # bump date in LICENSE

     # make sure it builds cleanly 
     # do the following on as many systems as are available
     # I did NCBI, my mac, EBI and Odyssey
     # In infernal: 'autoconf; sh ./configure', then 
     # in easel: 'make; make check; make dev; testsuite/valgrind_report.pl'
     # (1.1.3: add '--orig' option to 'valgrind' call in 
     #  valgrind_report.pl to get it to work at NCBI.)
     #
     # do some anecdotal testing of miniapps, make sure
     # version, date are correct.

     # push release branch to origin
     $ git push origin release-0.43

     # don't merge to master/develop or tag yet, wait
     # until your done testing Infernal. There may be
     # something you need to fix/change in easel.

   - create hmmer release branch

     $ cd hmmer
     $ git checkout develop

     # make sure develop is up to date with master (should be 0 or 1
     # commit behind master (I think it's impossible to have them
     # exactly even...)) via github

     $ git checkout -b release-3.1b3 h3-develop

     # bump version and release date in configure.ac
     # bump date in LICENSE 

     # make sure it builds cleanly 
     # do the following on as many systems as are available
     # I did NCBI, my mac, EBI and Odyssey
     # make check; make dev; 
     # do some anecdotal testing of programs, make sure
     # version, date are correct.

     # push release branch to master
     $ git push origin release-3.1b3

     # don't merge to master/develop or tag yet, wait
     # until your done testing Infernal. There may be
     # something you need to fix/change in easel.
     
   - create infernal release branch
   
     $ cd infernal
     $ git checkout develop
     
     # make sure develop is up to date with master (should be 0
     # commits behind master) via github

     $ git checkout -b release-1.1.2 develop

     # bump version and release date of infernal, hmmer and easel
     # in configure.ac
     # make sure it builds cleanly 
     # do the following on as many systems as are available
     # I did NCBI, my mac, EBI and Odyssey
     # make check; make devcheck; 
     # do some anecdotal testing of programs, make sure
     # version, date are correct.

     # make sure the user guide builds on at least one system (NCBI)
     $ cd documentation/userguide; make

     # Now, prepare the distribution, which involves more testing
     # and updating the user guide, then when you're sure you're
     # done, commit to the release branch and merge to master then
     # develop (instructions on this are below after the 'Preparing
     # a distribution' section).

================================================================
= Prepare the release and update the user guide
================================================================

* Write the release notes in releases/.
  To gather information, check:
   feature branches and commit messages on github
   Infernal Bugs/BUGTRAX - update this file to mark release that fixed
                           bugs, and divider indicating release.

   When done, git add the new RELEASE-xxx file.

* Edit .bashrc
  I use the following environment variables in the scripting below:
    INFERNAL_VERSION              The current version.  
    INFERNAL_OLDVERSION           The version we regress against. (found in ~releases/infernal-${INFERNAL_OLDVERSION}
    INFERNAL_RELEASE_NOTEBOOK     The e-notebook dir ({HOME}/notebook/xxx)
    INFERNAL_OLDRELEASE_NOTEBOOK  The e-notebook dir used for last release ({HOME}/notebook/xxx)

  Having these set everywhere, in all the ssh'ing you're about to 
  do, simplifies the scripting below, and reduces the odds of 
  cut/paste errors.

   . ~/.bashrc

* Update the User guide
  Do this in the git repo you've checked out in
  $INFERNAL_RELEASE_NOTEBOOK 

  - Update version numbers in the installation section.
  - Redo the tutorial exercises and add new output from new version.
    Test with regression info, hopefully in
    $INFERNAL_OLDRELEASE_NOTEBOOK/infernal/ or 
    $INFERNAL_OLDRELEASE_NOTEBOOK/wd-infernal/.
  - Search all .tex documents for old version and update as necessary.
  - Commit and push all changes.

================================================================
= Creating a source distribution
================================================================

Before starting this step, you should be fairly confident that the
code is ready for release. You should have already done the normal
testing (make; make dev; make check; make devcheck;) in your local git
repo.

${INFERNAL_VERSION}, ${EASEL_VERSION}, and ${HMMER_VERSION} tags used
below should match @INFERNAL_VERSION@, @EASEL_VERSION@ and
@HMMER_VERSION@ in configure.ac, Makefile.

* cd ~/releases

* Delete any old releases of the same number
   rm -rf infernal-${INFERNAL_VERSION}
   rm -f  infernal-${INFERNAL_VERSION}.tar
   rm -f  infernal-${INFERNAL_VERSION}.tar.gz

* Clone from git and checkout release branches
  ssh cbbdev13
  git clone https://github.com/EddyRivasLab/infernal.git infernal-${INFERNAL_VERSION}
  cd infernal-${INFERNAL_VERSION}
  git checkout release-${INFERNAL_VERSION}

# note we don't use EASEL_VERSION and HMMER_VERSION here by setting it
# in our .bashrc, because we want to make sure
# the release_notes/LICENSE call below does that correctly

  git clone https://github.com/EddyRivasLab/easel.git
  cd easel
  git checkout release-0.43
  cd ..

  git clone https://github.com/EddyRivasLab/hmmer.git
  cd hmmer
  git checkout release-3.1b3
# the crucial aclocal.m4 symlink UP one dir   
  ln -s ../easel/aclocal.m4 aclocal.m4
  cd ..

  autoconf; (cd easel; autoconf); (cd hmmer; autoconf);
  ./configure; 
  . release-notes/LICENSE.sh

* Check that svn has file permissions right. 
  Both of these should have no output.
   find . ! -perm -u+r -print
   find . -perm o+x ! -perm -u+x -print

* versioning, dating, licensing (these are originally set in
  configure.ac, and exported as shell variables by LICENSE.sh call
  above, make sure they're correct using echo before proceeding)

   echo ${INFERNAL_VERSION}
   echo ${EASEL_VERSION}
   echo ${HMMER_VERSION}
   echo ${INFERNAL_DATE}
   echo ${HMMER_DATE}
   echo ${EASEL_DATE}
   echo ${INFERNAL_COPYRIGHT}
   echo ${HMMER_COPYRIGHT}
   echo ${EASEL_COPYRIGHT}

* must do Easel and HMMER first

   easel/devkit/sedition EASEL_VERSION ${EASEL_VERSION} EASEL_DATE "${EASEL_DATE}" EASEL_COPYRIGHT "${EASEL_COPYRIGHT}" easel/00README
   easel/devkit/sedition EASEL_VERSION ${EASEL_VERSION} EASEL_DATE "${EASEL_DATE}" EASEL_COPYRIGHT "${EASEL_COPYRIGHT}" easel/INSTALL
   easel/devkit/sedition EASEL_VERSION ${EASEL_VERSION} EASEL_DATE "${EASEL_DATE}" EASEL_COPYRIGHT "${EASEL_COPYRIGHT}" easel/LICENSE.tag
   find easel -type f -exec easel/devkit/sedition-pp LICENSE easel/LICENSE.tag {} \;   

   easel/devkit/sedition HMMER_VERSION ${HMMER_VERSION} HMMER_DATE "${HMMER_DATE}" HMMER_COPYRIGHT "${HMMER_COPYRIGHT}" hmmer/INSTALL
   easel/devkit/sedition HMMER_VERSION ${HMMER_VERSION} HMMER_DATE "${HMMER_DATE}" HMMER_COPYRIGHT "${HMMER_COPYRIGHT}" hmmer/release-notes/LICENSE.tag
   find hmmer -type f -exec easel/devkit/sedition-pp LICENSE hmmer/release-notes/LICENSE.tag {} \;   

   easel/devkit/sedition INFERNAL_VERSION ${INFERNAL_VERSION} INFERNAL_DATE "${INFERNAL_DATE}" INFERNAL_COPYRIGHT "${INFERNAL_COPYRIGHT}" README
   easel/devkit/sedition INFERNAL_VERSION ${INFERNAL_VERSION} INFERNAL_DATE "${INFERNAL_DATE}" INFERNAL_COPYRIGHT "${INFERNAL_COPYRIGHT}" INSTALL
   easel/devkit/sedition INFERNAL_VERSION ${INFERNAL_VERSION} INFERNAL_DATE "${INFERNAL_DATE}" INFERNAL_COPYRIGHT "${INFERNAL_COPYRIGHT}" release-notes/LICENSE.tag
   find .     -type f -exec easel/devkit/sedition-pp LICENSE release-notes/LICENSE.tag {} \;

   cd documentation/manpages/
   for manpage in *.man; do \
     ../../easel/devkit/sedition INFERNAL_VERSION ${INFERNAL_VERSION} INFERNAL_DATE "${INFERNAL_DATE}" INFERNAL_COPYRIGHT "${INFERNAL_COPYRIGHT}" INFERNAL_LICENSE "${INFERNAL_LICENSE}" INFERNAL_URL "${INFERNAL_URL}" $manpage;\
   done
   cd ../..

* compile documentation
   cd documentation/userguide
   chmod +x ../../easel/devkit/rmanprocess.pl
   make
   mv Userguide.pdf ../../Userguide.pdf
   cd ../..

* clean up files that don't belong in the distro, 
  IMPORTANTLY INCLUDING THE .git SUBDIRS IN INFERNAL, HMMER AND EASEL

  Note: after 1.1rc1, we changed this part: documentation/userguide
  in infernal and hmmer, and documentation/ in easel are no longer
  removed. Their Makefile.in's have been updated to check for req'd
  executables before building the guide. They were originally removed
  b/c Sean didn't want users going in there, running make, failing
  with many errors due to missing executables, and reporting bugs to
  us.

   make distclean
   cp   release-notes/RELEASE-${INFERNAL_VERSION} RELEASE-NOTES
   rm -rf .git
   rm -rf Bugs
   rm -rf Manuscripts
   rm -rf release-notes
   rm -rf autobuild
   rm makeTAGS.sh

CHECK FOR ANY WEIRD conf*** (e.g. confQy52wQ) directories, and delete if you find them
this burned me in 1.1.2 release.

   cd hmmer
   rm -rf .git
   rm -rf bugs
   rm -rf contrib
   rm -rf release-notes
   rm -rf test-speed
   rm -rf autobuild
   rm -rf autom4te.cache 

   cd ../easel
   rm -rf .git
   rm -f  00CHECKLIST LICENSE.csh.in LICENSE.tag 
   cd ..


   rm *~

* record and finish release notes
  (Sean's command in HMMER that I skipped because I'm not sure what it
  does: cat RELEASE-NOTES | dumpnotes )
    
   emacs RELEASE-NOTES
   rm *~
Delete TO-DO sections and clean up for public consumption.

  (Again, not sure of this command that Sean uses for hmmer: 'texclean')

* package
* The 'h' option on tar is --dereference: it may only be 
* available in gnu tar. It dereferences symlinks and makes
* them copies instead. Windows systems can't deal w/ symlinks,
* we're told.
   cd ..
   tar cvfh infernal-${INFERNAL_VERSION}.tar infernal-${INFERNAL_VERSION}
   gzip infernal-${INFERNAL_VERSION}.tar

   1.1rc1: 11.7 Mb (gzipped)
   1.1rc2: 19.1 Mb (gzipped, diff b/c of documentation directories)
   1.1rc3: 19.2 Mb (gzipped)
   1.1rc4: 19.2 Mb (gzipped)
   1.1:    19.2 Mb (gzipped)
   1.1.1:  19.5 Mb (gzipped) added large testsuite/bug-i43.cm file
   --- git flow ---
   1.1.2:  19.4 Mb (gzipped)

All subsequent tests are on this source distro.

================================================================
= Build for testing
================================================================

We'll build two sets of the executables on cbbdev** for testing
(build-gcc-mpi and build-icc), for which we'll run tests locally
(tests-fast.sh) and on the compute farm (tests-slow.sh).

On cbbdev13 (our compile host):
  ssh cbbdev13
  cd ~/releases/infernal-${INFERNAL_VERSION}
  mkdir build-gcc-mpi
  cd build-gcc-mpi
  ../configure --enable-mpi > build.out   2>&1
  make            >> build.out	 2>&1
  make dev        >> build.out	 2>&1
  make check      >> build.out	 2>&1
  make devcheck   >> build.out	 2>&1

1 line: ../configure --enable-mpi > build.out 2>&1; make >> build.out 2>&1; make dev >> build.out 2>&1; make check >> build.out 2>&1; make devcheck >> build.out 2>&1

  ssh cbbdev13
  cd ~/releases/infernal-${INFERNAL_VERSION}
  mkdir build-icc
  cd build-icc
  ../configure CC=icc > build.out  2>&1
  make            >> build.out  2>&1
  make dev        >> build.out  2>&1
  make check      >> build.out  2>&1
  make devcheck   >> build.out  2>&1

1 line: ../configure CC=icc > build.out 2>&1; make >> build.out 2>&1; make dev >> build.out 2>&1; make check >> build.out 2>&1; make devcheck >> build.out 2>&1

================================================================
= Testing
================================================================

See latest e-notebook for tests.

It's good to start the tests at this stage, because they are the
slowest part of the release 00CHECKLIST. When you hit a point where
you're waiting, move onto to the next section -- building and testing
on the compile farm.

Current testing is three sets of jobs, see old notebook 00LOG. 

tests-fast.sh:          fast enough to run in succession.
tests-fast-valgrind.sh: same tests as tests-fast.sh but valgrind
tests-slow.sh:          submit to cluster, includes MPI jobs.

Output tests-fast.sh and tests-fast-valgrind.sh to a file, and
manually look at each line for errors. 

These instructions should work post-1.1rc2:

Set up tests:
  ssh cbbdev13
  cd ${INFERNAL_RELEASE_NOTEBOOK}
  mkdir tests
  mkdir tests/out-files/
  mkdir tests/err-files/
  mkdir tests/out-oldversion-files/
  mkdir tests/err-oldversion-files/
  cd tests
  cp ${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/cp-required-files.sh ./
  sh cp-required-files.sh

Run tests:
tests-fast*.sh          run on cbbdev13,                 takes about 1 minute
tests-fast-valgrind*.sh run valgrind tests on cbbdev13y, takes about 30 minutes
tests-slow*.sh          submit to compute farm,          takes about 2.5 hours

  time sh tests-fast.sh > tests-fast.out
  time sh tests-fast-oldversion.sh > tests-fast-oldversion.out
  diff tests-fast.out tests-fast-oldversion.out > tests-fast.diff

  sh run-valgrind.sh  

Takes about 1 hour. Note run-valgrind does not run jobs in parallel
because current and old version tests create and use files of the same
name.  

Look at err-files/valg.1.err and make sure there's no memory
leaks or errors.

  diff tests-fast-valgrind.out tests-fast-valgrind-oldversion.out > tests-fast-valgrind.diff
  sh tests-slow.sh
  sh tests-slow-oldversion.sh 

Wait for these to finish (about 3 hours)
***FOR FIRST RELEASE POST 1.1.2, ADD TO DIFF-SLOW SO NEW 1.1.2 TESTS
***ARE DIFFED (e.g. cmscan --fmt 2)
  sh regressify-slow.sh 
  sh regressify-slow-oldversion.sh
  sh diff-slow.sh > tests-slow.diff

Make sure all diff output includes only expected differences.
  emacs tests-fast.diff
  emacs tests-fast-valgrind.diff
  emacs tests-slow.diff

Make sure all err-files/* and err-oldversion-files/* (besides valg.*err) are empty.

Remember to test on both builds (gcc-mpi and icc), the scripts above
already do this, except for the valgrind ones.

Then run some anecdotal tests.
     mkdir anecdotes
Some examples:
     cd anecdotes
     ~/releases/infernal-${INFERNAL_VERSION}/build-gcc-mpi/src/cmfetch ~/db/rfam/rfam_12.1/Rfam.cm 5S_rRNA > 5S.cm
     ~/releases/infernal-${INFERNAL_OLDVERSION}/build-gcc-mpi/src/cmfetch ~/db/rfam/rfam_12.1/Rfam.cm 5S_rRNA > 5S.old.cm
     diff 5S.cm 5S.old.cm
     ~/releases/infernal-${INFERNAL_VERSION}/build-gcc-mpi/src/cmstat 5S.cm
     ~/releases/infernal-${INFERNAL_VERSION}/build-gcc-mpi/src/cmstat 5S.old.cm
     ~/releases/infernal-${INFERNAL_VERSION}/build-gcc-mpi/src/cmsearch 5S.cm /panfs/pan1/infernal/db/other-genomes/hvol.fa
     ~/releases/infernal-${INFERNAL_OLDVERSION}/build-gcc-mpi/src/cmsearch 5S.cm /panfs/pan1/infernal/db/other-genomes/hvol.fa
     ~/releases/infernal-${INFERNAL_VERSION}/build-gcc-mpi/src/cmpress 5S.cm
     ~/releases/infernal-${INFERNAL_OLDVERSION}/build-gcc-mpi/src/cmpress 5S.old.cm
     ~/releases/infernal-${INFERNAL_VERSION}/build-gcc-mpi/src/cmscan 5S.cm /panfs/pan1/infernal/db/other-genomes/hvol.fa
     ~/releases/infernal-${INFERNAL_VERSION}/build-gcc-mpi/src/cmscan 5S.old.cm /panfs/pan1/infernal/db/other-genomes/hvol.fa
     ~/releases/infernal-${INFERNAL_VERSION}/build-gcc-mpi/src/cmsearch -A 5S.sto 5S.cm /panfs/pan1/infernal/db/other-genomes/hvol.fa
     ~/releases/infernal-${INFERNAL_VERSION}/build-gcc-mpi/easel/miniapps/esl-reformat fasta 5S.sto > 5S.fa
     ~/releases/infernal-${INFERNAL_VERSION}/build-gcc-mpi/src/cmalign 5S.cm 5S.fa 

Also, do a rmark3 benchmark with default settings and --mid for
both new and old versions.	      
(These commands should work post-i1.1rc2 if you're doing a small
update release)

     cd ${INFERNAL_RELEASE_NOTEBOOK}/tests/
     mkdir rmark3
     cd rmark3
     mkdir models

     cp ${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/rmark3/rmark3.msa ./
     cp ${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/rmark3/fetch.sh ./
     cp ${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/rmark3/build.sh ./
     cp ${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/rmark3/calibrate.sh ./
     sh fetch.sh
     sh build.sh
Wait for all jobs to finish (about 1 minute)
     sh calibrate.sh
STILL TODO
Wait for all jobs to finish (about 30 minutes, if cluster is nearly empty)
     cat models/*.cm > models/rmark3.cm     

     cp ${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/rmark3/rmark3* ./
     cp ${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/rmark3/df.opts ./
     cp ${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/rmark3/mid.opts ./
     cp ${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/rmark3/do-symlink.sh ./
     cp ${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/rmark3/do-all.sh ./
     cp ${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/rmark3/do-pp.sh ./
Edit version number (may not be necessary) in do-symlink.sh, do-all.sh, do-pp.sh
     emacs do-symlink.sh     
     emacs do-all.sh
     emacs do-pp.sh
     sh do-symlink.sh

NOTE: as of 1.1, do-all.sh won't work as written b/c it's set-up 
for Janelia's cluster. As of 1.1.3 and beyond, you should be able
to look at/copy
${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/rmark3/tmp-rmark-master.pl 

     sh do-all.sh 
Wait for jobs to finish (approximately 20 min)

NOTE: as of 1.1rc3, the do-pp.sh won't work out of the box. You'll
need to copy the 'rmark-rocplot' executable from a build dir into the
rmark directory, because rmark-pp.sh expects all the rmark scripts to
be in the same dir, then delete it when we're done with it:

     cp ~/releases/infernal-${INFERNAL_VERSION}/build-gcc-mpi/rmark/rmark-rocplot ~/releases/infernal-${INFERNAL_VERSION}/rmark/
     sh do-pp.sh 
Wait for jobs to finish (approximately 5 min)
     rm ~/releases/infernal-${INFERNAL_VERSION}/rmark/rmark-rocplot
      
Compare the old and current .sum files.
and with the .sum files in ${INFERNAL_OLDRELEASE_NOTEBOOK}/tests/rmark3/	 

Check the userguide (Userguide.pdf).

================================================================
= Build and check on all compile farm nodes
================================================================
CURRENTLY WE HAVE NO COMPILE FARM

What I'll do is test it on the following:
cbbdev21
my Mac Desktop
ody (Harvard)
EBI 
Mac laptop (if convenient)

One issue is that these are all different file systems, whereas I used
to do (at Janelia) the compile farm tests from one directory because
the file system was shared.

For here, I'll actually copy the src tarball (via public ftp site):
UPDATE VERSION AS NECESSARY
  wget http://ftp.ncbi.nlm.nih.gov/pub/nawrocki/infernal-1.1.2.tar.gz 
  tar xvfz infernal-1.1.2.tar.gz

Then build and run tests:

  ./configure > build.out 2>&1
  make >> build.out 2>&1
  make dev >> build.out 2>&1
  make check >> build.out 2>&1
  make devcheck >> build.out 2>&1

1line:./configure > build.out 2>&1;make >> build.out 2>&1;make dev >> build.out 2>&1;make check >> build.out 2>&1;make devcheck >> build.out 2>&1;

  Check build.out 

  Then do some anecdotal tests, possibly from the tutorial.

  Then make sure that this works:

  make clean

Then do the same in hmmer and easel (to test those 'release'
versions). Actually do this by removing the src distro, unpacking it
again, and redoing for hmmer and then easel. For hmmer, you'll need to
copy all the easel files into hmmer.

Do hmmer:
   cd ..
   rm -rf infernal-1.1.2
   tar xvf infernal-1.1.2.tar.gz
   cd infernal-1.1.2/hmmer
   cp -r ../easel ./easel
   sh ./configure > build.out 2>&1
   make >> build.out 2>&1
   make dev >> build.out 2>&1
   make check >> build.out 2>&1
   
1line: sh ./configure > build.out 2>&1; make >> build.out 2>&1; make dev >> build.out 2>&1; make check >> build.out 2>&1;

 check build.out
 run anecdotal tests
   make clean

And finally easel:
   cd ../..
   rm -rf infernal-1.1.2
   tar xvf infernal-1.1.2.tar.gz
   cd infernal-1.1.2/easel
   sh ./configure > build.out 2>&1
   make >> build.out 2>&1
   make dev >> build.out 2>&1
   make check >> build.out 2>&1

1line: sh ./configure > build.out 2>&1; make >> build.out 2>&1; make dev >> build.out 2>&1; make check >> build.out 2>&1;

 check build.out
 run anecdotal tests
   make clean

              inf  hmmer easel 
macbook pro   pass pass  pass
cbbdev21      pass pass  pass
ebi           pass pass  pass
ody           pass pass  pass

DIDN'T DO ncbimac2056 FOR 1.1.2 (did macbook pro)

================================================================
= Binary distros
================================================================

  cd ${INFERNAL_RELEASE_NOTEBOOK}
  mkdir Distros; cd Distros

Note: the configure call differs from the one Sean uses in hmmer. I
specify --prefix. If I don't do that I get a 'make install' error
because I don't have permission to change the permissions on the man
directory. Also, as a result I have to delete the share/ directory
after I install. (Sean doesn't have to do that b/c his build won't
create it).

Three builds:
  linux-intel-gcc
  macosx-intel
  cygwin

linux-intel-gcc:
  ssh cbbdev13
  export INFERNAL_DISTRO=linux-intel-gcc
  cd ${INFERNAL_RELEASE_NOTEBOOK}/Distros
  tar zxf ~/releases/infernal-${INFERNAL_VERSION}.tar.gz
  mv infernal-${INFERNAL_VERSION} infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}
  cd infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}
  mkdir binaries

  mkdir build-${INFERNAL_DISTRO}
  cd build-${INFERNAL_DISTRO}
  ../configure \
   --bindir=${INFERNAL_RELEASE_NOTEBOOK}/Distros/infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}/binaries \
   --prefix=${INFERNAL_RELEASE_NOTEBOOK}/Distros/infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO} \
   > ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-${INFERNAL_DISTRO}.out  2>&1
  make                             >> ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-${INFERNAL_DISTRO}.out   2>&1
  make dev                         >> ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-${INFERNAL_DISTRO}.out   2>&1
  make check                       >> ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-${INFERNAL_DISTRO}.out   2>&1
  make install                     >> ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-${INFERNAL_DISTRO}.out   2>&1
  (cd easel/miniapps; make install >> ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-${INFERNAL_DISTRO}.out   2>&1)

Look at build-${INFERNAL_DISTRO}.out

  rm -rf ${INFERNAL_RELEASE_NOTEBOOK}/Distros/infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}/share

  cd ..
  rm -rf build-${INFERNAL_DISTRO}
***LOOK FOR WEIRD conf*** DIRS FILES AND DELETE THEM IF THEY EXIST 
  cd .. 
  tar cfh infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}.tar  infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}
  gzip infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}.tar


macosx-intel build (on my Mac Desktop):
You'll need to update the release notebook dir here next release
  export INFERNAL_DISTRO=macosx-intel
  export INFERNAL_RELEASE_NOTEBOOK=$UH/notebook/16_0611_inf_1p1p2_release
  export INFERNAL_VERSION=1.1.2

  cd ${INFERNAL_RELEASE_NOTEBOOK}/Distros
  tar zxf $UH/releases/infernal-${INFERNAL_VERSION}.tar.gz
  mv infernal-${INFERNAL_VERSION} infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}
  cd infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}
  mkdir binaries

  mkdir build-${INFERNAL_DISTRO}
  cd build-${INFERNAL_DISTRO}
  ../configure --bindir=${INFERNAL_RELEASE_NOTEBOOK}/Distros/infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}/binaries \ 
    --prefix=${INFERNAL_RELEASE_NOTEBOOK}/Distros/infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO} \ 
    > ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-${INFERNAL_DISTRO}.out  2>&1
  make                             >> ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-${INFERNAL_DISTRO}.out   2>&1
  make dev                         >> ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-${INFERNAL_DISTRO}.out   2>&1
  make check                       >> ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-${INFERNAL_DISTRO}.out   2>&1
  make install                     >> ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-${INFERNAL_DISTRO}.out   2>&1
  (cd easel/miniapps; make install >> ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-${INFERNAL_DISTRO}.out   2>&1)

Look at build-${INFERNAL_DISTRO}.out

  rm -rf ${INFERNAL_RELEASE_NOTEBOOK}/Distros/infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}/share

  cd ..
  rm -rf build-${INFERNAL_DISTRO}
***LOOK FOR WEIRD conf*** DIRS FILES AND DELETE THEM IF THEY EXIST 
  cd .. 
  tar cfh infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}.tar  infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}
  gzip infernal-${INFERNAL_VERSION}-${INFERNAL_DISTRO}.tar


cygwin (on a Windows VM):
  Copy tarball of src release to ssh.janelia.org so I can get it onto my cygwin virtual machine
    scp ~/releases/infernal-${INFERNAL_VERSION}.tar.gz nawrockie@ssh.janelia.org:~/

  Open up VM entitled 'IE11 - Win7' on MacBook pro via VirtualBox, see Nov 12 email from
    Travis Wheeler to my gmail address, or notes in 13_1205_inf_1p1_windows_cygwin/00LOG'
  
  (NOTE: this was done without variables, and was
   done on my MacBook pro in a windows VM)
  
  from cygwin home:
  cd ~/notebook/13_1205_inf_1p1_windows_cygwin
  pwd
    /home/IEUser/notebook/14_0723_inf_1p1p1_cygwin
  mkdir Distros
  cd Distros
  scp nawrockie@ssh.janelia.org:~/infernal-1.1.1.tar.gz .

  gunzip infernal-1.1.1.tar.gz
  tar xf infernal-1.1.1.tar
  mv infernal-1.1.1 infernal-1.1.1-cygwin
  cd infernal-1.1.1-cygwin
  mkdir build-cygwin
  cd build-cygwin
  ../configure \
   --bindir=/home/IEUser/notebook/14_0723_inf_1p1p1_cygwin/Distros/infernal-1.1.1-cygwin/binaries \
   --prefix=/home/IEUser/notebook/14_0723_inf_1p1p1_cygwin/Distros/infernal-1.1.1-cygwin \
   > /home/IEUser/notebook/14_0723_inf_1p1p1_cygwin/Distros/build-infernal-1.1.1-cygwin.out

  make          >> /home/IEUser/notebook/14_0723_inf_1p1p1_cygwin/Distros/build-infernal-1.1.1-cygwin.out 2>&1
  make dev      >> /home/IEUser/notebook/14_0723_inf_1p1p1_cygwin/Distros/build-infernal-1.1.1-cygwin.out 2>&1
  make check    >> /home/IEUser/notebook/14_0723_inf_1p1p1_cygwin/Distros/build-infernal-1.1.1-cygwin.out 2>&1
  make install  >> /home/IEUser/notebook/14_0723_inf_1p1p1_cygwin/Distros/build-infernal-1.1.1-cygwin.out 2>&1
  (cd easel/miniapps; make install >> /home/IEUser/notebook/14_0723_inf_1p1p1_cygwin/Distros/build-infernal-1.1.1-cygwin.out 2>&1)
  rm -rf /home/IEUser/notebook/14_0723_inf_1p1p1_cygwin/Distros/infernal-1.1.1-cygwin/share

 Look at build-infernal-1.1.1-cygwin.out.

  cd ..
  rm -rf build-cygwin
  cd .. 

 Add a 00README-cygin-binaries.txt file to the binaries/ dir. See the
 one I made in Dec 2013 for v1.1 as an example.   

  emacs binaries/00README-cygwin-binaries.txt
  tar cfh infernal-1.1.1-cygwin.tar  infernal-1.1.1-cygwin
  gzip infernal-1.1.1-cygwin.tar
  
Look at the build output for these three distros and make sure
everything looks normal and all tests pass:
  emacs ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-linux-intel-gcc.out
  emacs ${INFERNAL_RELEASE_NOTEBOOK}/Distros/build-macosx-intel.out
  ON MACBOOK PRO:
    emacs notebook/14_0723_inf_1p1p1_cygwin/Distros/build-infernal-1.1.1-cygwin.out

Test these Distro tarballs:

linux-intel-gcc: ${INFERNAL_RELEASE_NOTEBOOK}/Distros/infernal-${INFERNAL_VERSION}-linux-intel-gcc.tar.gz
macosx-intel:    ${INFERNAL_RELEASE_NOTEBOOK}/Distros/infernal-${INFERNAL_VERSION}-macosx-intel.tar.gz
cygwin:          notebook/14_0723_inf_1p1p1_cygwin/Distros/infernal-1.1.1-cygwin.tar.gz

Copy linux-intel-gcc to a new directory on your home dir on login-eddy
and test it with some anecdotal tets.
Copy macosx-intel tar ball to your laptop and test it.
Copy cygwin to another virtual machine or windows machine and test it.

================================================================
= Distribution
================================================================

* copy to ftp site 

    We can do this by copying it to our local copy of Sean's web git repo:

    cd /panfs/pan1/infernal/web/eddylab.org/site/software/infernal/

    (Or checkout new working copy of Sean's website with:
     'git clone nawrocke@ody:/n/eddyfs01/gitrepo/web.git'
     After setting up your ~/.ssh/config file as explained here:
     https://rc.fas.harvard.edu/resources/documentation/linux/using-ssh-controlmaster-for-single-sign-on/)

     cp ~/releases/infernal-${INFERNAL_VERSION}/README ./
     cp ~/releases/infernal-${INFERNAL_VERSION}/RELEASE-NOTES ./
     cp ~/releases/infernal-${INFERNAL_VERSION}/LICENSE ./
     cp ~/releases/infernal-${INFERNAL_VERSION}/Userguide.pdf ./
     cp ~/releases/infernal-${INFERNAL_VERSION}.tar.gz ./
     cp ${INFERNAL_RELEASE_NOTEBOOK}/Distros/infernal-${INFERNAL_VERSION}-linux-intel-gcc.tar.gz  ./
     cp ${INFERNAL_RELEASE_NOTEBOOK}/Distros/infernal-${INFERNAL_VERSION}-macosx-intel.tar.gz ./

     rm infernal.tar.gz 
     ln -s infernal-1.1.2.tar.gz infernal.tar.gz

   Update index.html, which is in a different directory:
     cd /panfs/pan1/infernal/web/infernal/  
   update index.html    

     - search for all instances of the version (e.g. 1.1.2)
       and update them.

   Add everything to git and commit it, and push it.

   Email Sean and ask him to do a 'make' on the website.

   Review the website once Sean has performed a 'make'.

====================================================================
= git: finalizing release branches and merging to develop and master
====================================================================

Once you're convinced you're done, all tests pass and src and binary
distros created and tested, we can finalize with git:

You'll want a fresh git repo to work in, so follow the instructions in 
Creating a source distribution to clone and switch branches, but do 
it into ~/releases/infernal-release instead of
~/releases/infernal-${INFERNAL_VERSION}, like so:

   cd ~/releases 
   rm -rf infernal-release

   ssh cbbdev13
   git clone https://github.com/EddyRivasLab/infernal.git infernal-release
   cd infernal-release
   git checkout release-${INFERNAL_VERSION}

   git clone https://github.com/EddyRivasLab/easel.git
   cd easel
   git checkout release-0.43
   cd ..

   git clone https://github.com/EddyRivasLab/hmmer.git
   cd hmmer
   git checkout release-3.1b3

 Now, to merge to master and then develop for easel:
 CAREFUL HERE... NO FAT FINGERS

 DO THIS IN A NON-SCREEN SHELL SO GIT DOESN'T MESS UP WHEN TRYING TO OPEN AN EMACS WINDOW
 FOR YOUR COMMIT MESSAGES!

   cd ~/releases/infernal-release/easel
   git checkout master
   git merge --no-ff release-0.43 # probably just accept default log message
   git tag -a 0.43
   git push origin 0.43
   git tag -a infernal-1.1.2
   git push origin infernal-1.1.2
   git push
*** I think all 3 pushes may be overkill (first one seems to have pushed the merge as well), 
    but I did 3 for 1.1.2 and it worked.    

 Now switch to develop and merge there too
   git checkout develop
   git merge --no-ff release-0.43 # probably just accept default log message
   git push
   git branch -d release-0.43
   git push origin --delete release-0.43

 Now for HMMER:
 AGAIN YOU NEED TO BE ON A NON-SCREEN SHELL SO GIT CAN PULL UP AN
 EMACS WINDOW
   cd ~/releases/infernal-release/hmmer
   git checkout h3-master 
   git merge --no-ff release-3.1b3
   
YOU MAY GET CONFLICTS, IF SO, DO THIS: 
- FIX THE CONFLICTS IN EMACS FOR FILE x (JUST LIKE IN SVN)
- git add x
- git commit -m "Fixed conflicts in x"
POSSIBLY CHECK WITH SEAN/TRAVIS TO MAKE SURE IT'S OKAY IF YOU PUSH
THE SPECIFIC CHANGES YOU JUST MADE
- git push

   git tag -a 3.1b3   
   git push origin 3.1b3
   git tag -a infernal-1.1.2
   git push origin infernal-1.1.2
   git push
*** I think all 3 pushes may be overkill (first one seems to have pushed the merge as well), 
    but I did 3 for 1.1.2 and it worked.    

  Now switch to h3-develop (NOT develop) and merge there too
    git checkout h3-develop
    git branch # just a check
    git merge --no-ff release-3.1b3 # probably just accept default log message
    git push
    git branch -d release-3.1b3
    git push origin --delete release-3.1b3

 Now, finally, for Infernal,
 AGAIN YOU NEED TO BE ON A NON-SCREEN SHELL SO GIT CAN PULL UP AN
 EMACS WINDOW

    cd ~/releases/infernal-release
    git checkout master
    git merge --no-ff release-1.1.2 # probably just accept default log message
    git tag -a 1.1.2
    git push origin 1.1.2
    git push

Now merge release branch back to develop:
    git checkout develop
    git merge --no-ff release-1.1.2
    git push
    git branch -d release-1.1.2        
    git push origin --delete release-1.1.2

Then email Sean and tell him to do a 'make' for the website.

And possibly update the github wiki's 'release' sections based on what
you learned during the release.

Release history
---------------
0.3    - SRE, Thu Jul  4 10:27:16 2002
0.5    - SRE, Sun Oct  6 14:22:47 2002
0.51   - SRE, Wed Oct  9 09:43:50 2002
0.52   - SRE, Mon Oct 14 2002
0.53   - SRE, Thu Jan  2 14:24:07 2003
0.54   - SRE, Sun Jan  5 18:17:55 2003
0.55   - SRE, Wed Apr  2 18:12:23 2003   r875
0.6    - SRE, Tue Nov  1 17:13:00 2005   r1477  Easel:r72
0.7    - SRE, Tue Dec 13 14:54:30 2005   r1534  Easel:r84
0.71   - SRE, Thu Nov 30 11:43:57 2006   r1730  Easel:r142
0.72   - SRE, Sat Jan 27 10:44:46 2007   r1862  Easel:r149
0.8    - SRE, Sun Apr 29 11:55:56 2007   r1984  Easel:r176
0.81   - SRE, Tue May  1 10:36:10 2007   r1995  Easel:r179
1.0rc1 - SRE, Fri Jun 20 13:38:46 2008   r2492  Easel:r276
1.0rc2 - SRE, Sat Jul 12 09:26:29 2008   r2502  Easel:r280
1.0rc3 - SRE, Wed Sep 24 14:33:59 2008   r2596  Easel:r294
1.0rc4 - SRE, Mon Nov 24 17:43:07 2008   r2635  Easel:r304
1.0rc5 - SRE, Wed Dec 17 17:59:01 2008   r2673  Easel:r310
1.0    - SRE, Tue Jan 13 14:33:16 2009   r2710  Easel:r317
1.0.1  - SRE, Sat Oct 24 10:12:50 2009   r2997  Easel:r422
1.0.2  - SRE, Fri Oct 30 13:57:33 2009   r3022  Easel:r428
1.1rc1 - EPN, Wed Jun 27 22:02:39 2012   r4131  Easel:r775
1.1rc2 - EPN, Fri Dec 14 15:04:24 2012   r4343  Easel:r835
1.1rc3 - EPN, Tue Jun 11 05:55:39 2013   r4479  Easel:r872
1.1rc4 - EPN, Wed Jun 26 14:17:19 2013   r4499  Easel:r875
1.1    - EPN, Thu Oct 31 13:42:20 2013   r4549  Easel:r890
1.1.1  - EPN, Wed Jul 23 11:11:49 2014   r4711  Easel:r918
---- git flow ----
1.1.2  - EPN, Fri Jul  1 23:08:39 2016   HMMER:3.1b3 Easel:0.43
