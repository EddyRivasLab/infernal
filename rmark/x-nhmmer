#! /usr/bin/perl 

# Do a piece of a rmark benchmark, for nhmmer.
#
# This script is normally called by rmark-master.pl; its command line
# syntax is tied to rmark-master.pl.
# x-nhmmer doesn't use the <msafile>, but it's passed in so that
# rmark-master.pl can use a consistent command line structure for
# all search programs (BLAST uses it, for example).
#
# Usage:      x-nhmmer <execdir>        <scriptdir> <modeldir> <resultdir> <optsfile> <tblfile> <msafile>  <posfile>  <fafile> <outfile>
# Example:  ./x-nhmmer ../hmmer/src/    ../rmark    h3-models  testdir     h3-df.opts test.tbl  rmark3.msa rmark3.pos test.fa  test.out
#
# SRE, Tue Apr 20 10:32:49 2010 [Janelia]
# SVN $Id$
#

$usage = "Usages: x-nhmmer [options]\n\t<execdir>\n\t<scriptdir>\n\t<modeldir>\n\t<resultdir>\n\t<optsfile>\n\t<tblfile>\n\t<msafile>\n\t<posfile>\n\t<fafile>\n\t<outfile>\n";

if(scalar(@ARGV) != 10) { printf("$usage\n"); exit(1); }

($execdir, $scriptdir, $modeldir, $resultdir, $optsfile, $tblfile, $msafile, $posfile, $fafile, $outfile) = @ARGV;
$tmpoutfile = $outfile . ".tmp";

$idscript   = "$scriptdir/rmark-idpositives.pl";
$nhmmer     = "$execdir/nhmmer";


if (! -d $execdir)                                      { die "didn't find executable directory $execdir"; }
if (! -d $scriptdir)                                    { die "didn't find script directory $scriptdir"; }
if (! -d $modeldir)                                     { die "didn't find model directory $modeldir"; }
if (! -x $nhmmer)                                       { die "didn't find executable $nhmmer"; }
if (! -e $resultdir)                                    { die "$resultdir doesn't exist"; }
if (! -e $posfile)                                      { die "$posfile doesn't exist"; }
if (! -e $idscript)                                     { die "positive identification script $idscript doesn't exist"; }
if (! -e $optsfile)                                     { die "options file $optsfile doesn't exist"; }

# read options file

open(OPTS, $optsfile) || die "couldn't open options file $optsfile"; 
$searchopts = <OPTS>;
close(OPTS);
chomp $searchopts;

# check all models exist before we fire off searches
open(TABLE, "$tblfile")   || die "failed to open $tblfile";
while (<TABLE>) {
    ($msaname) = split;
    if(! -e "$modeldir/$msaname.hmm") { die "didn't find model file $modeldir/$msaname.hmm"; }
}
close(TABLE);

open(OUTFILE,">$outfile") || die "failed to open $outfile";
open(TMPOUTFILE,">$tmpoutfile") || die "failed to open $tmpoutfile";
open(TABLE, "$tblfile")   || die "failed to open $tblfile";
while (<TABLE>)
{
    ($msaname) = split;

    $status = system("$nhmmer $searchopts --tblout $resultdir/$msaname.tmp $modeldir/$msaname.hmm $fafile > $resultdir/$msaname.search");
    if ($status != 0) { die "FAILED: $nhmmer $searchopts --tblout $resultdir/$msaname.tmp $resultdir/$msaname.hmm $fafile > $resultdir/$msaname.nhmmer"; }

    open(OUTPUT, "$resultdir/$msaname.tmp") || die "FAILED: to open $resultdir/$msaname.tmp tabular output file"; 
    while (<OUTPUT>)
    {
	if (/^\#/) { next; }
	@fields   = split(' ', $_, 12);
	$target      = $fields[0];
	$target_from = $fields[6];
	$target_to   = $fields[7];
	$pval        = $fields[8];
	$bitscore    = $fields[9];
	printf TMPOUTFILE "%10g %10.1f %10d %10d %20s %35s\n", $pval, $bitscore, $target_from, $target_to, $target, $msaname;
    }

    unlink "$resultdir/$msaname.tmp";
}
close TABLE;
close OUTFILE;
close TMPOUTFILE;

# Final step use 'rmark-idpositives.pl' to identify positives in the temporary output file to
# create the permanent output file
$status = system("perl $idscript $posfile $tmpoutfile > $outfile");
if ($status != 0) { die "FAILED: $idscript $posfile $tmpoutfile > $outfile"; }
unlink $tmpoutfile;
    

