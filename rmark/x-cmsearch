#! /usr/bin/perl 

# Do a piece of a rmark benchmark, for cmsearch.
#
# This script is normally called by rmark-master.pl; its command line
# syntax is tied to rmark-master.pl.
# x-cmsearch doesn't use the <msafile>, but it's passed in so that
# rmark-master.pl can use a consistent command line structure for
# all search programs (BLAST uses it, for example).
#
# Usage:      x-cmsearch <execdir>        <modeldir> <resultdir> <optsfile> <tblfile> <msafile>  <posfile>  <fafile> <outfile>
# Example:  ./x-cmsearch ../hmmer/src/    h3-models  testdir     h3-df.opts test.tbl  rmark3.msa rmark3.pos test.fa  test.out
#
# Command-line options:
# -M <n> : run MPI with <n> <= 8 processors, only valid if --mpi exists in the $optsfile
#
# SRE, Tue Apr 20 10:32:49 2010 [Janelia]
# SVN $Id$
#
use Getopt::Std;
getopts('M:');
$mpi_nprocs = 8;
if (defined $opt_M) { 
    $mpi_nprocs = $opt_M; 
    if($mpi_nprocs < 2 || $mpi_nprocs > 8) { die "ERROR, with -M <n>, <n> must be between 2 and 8"; }
}

$usage = "Usages: x-cmsearch [options]\n\t<execdir>\n\t<modeldir>\n\t<resultdir>\n\t<optsfile>\n\t<tblfile>\n\t<msafile>\n\t<posfile>\n\t<fafile>\n\t<outfile>\n";
$options_usage  = "Options:\n\t";
$options_usage .= " -M <n> : run MPI with <n> <= 8 processors, only valid if --mpi exists in the <optsfile>\n\n";

if(scalar(@ARGV) != 9) { printf("$usage\n$options_usage"); exit(1); }

($execdir, $modeldir, $resultdir, $optsfile, $tblfile, $msafile, $posfile, $fafile, $outfile) = @ARGV;
$tmpoutfile = $outfile . ".tmp";

$idscript   = "identify-positives.pl";
$cmsearch   = "$execdir/cmsearch";

if (! -d $execdir)                                      { die "didn't find executable directory $execdir"; }
if (! -x $cmsearch)                                       { die "didn't find executable $cmsearch"; }
if (! -e $resultdir)                                    { die "$resultdir doesn't exist"; }
if (! -e $posfile)                                      { die "$posfile doesn't exist"; }
if (! -e $idscript)                                     { die "positive identification script $idscript doesn't exist"; }
if (! -e $optsfile)                                     { die "options file $optsfile doesn't exist"; }

# read options file, determine if we're using mpi or not
$do_mpi = 0;
open(OPTS, $optsfile) || die "couldn't open options file $optsfile"; 
$searchopts = <OPTS>;
if($searchopts =~ m/\-\-mpi/) { $do_mpi = 1; }
close(OPTS);
chomp $searchopts;

# check all models exist before we fire off searches
open(TABLE, "$tblfile")   || die "failed to open $tblfile";
while (<TABLE>) {
    ($msaname) = split;
    if(! -e "$modeldir/$msaname.cm") { die "didn't find model file $modeldir/$msaname.cm"; }
}
close(TABLE);

open(OUTFILE,">$outfile") || die "failed to open $outfile";
open(TMPOUTFILE,">$tmpoutfile") || die "failed to open $tmpoutfile";
open(TABLE, "$tblfile")   || die "failed to open $tblfile";
while (<TABLE>)
{
    ($msaname) = split;

    if($do_mpi) { 
	$status = system("mpirun -np $mpi_nprocs $cmsearch $searchopts --tabfile $resultdir/$msaname.tmp $modeldir/$msaname.cm $fafile > $resultdir/$msaname.search");
	if ($status != 0) { die "FAILED: mpirun -np $mpi_nprocs $cmsearch $searchopts --tabfile $resultdir/$msaname.tmp $resultdir/$msaname.cm $fafile > $resultdir/$msaname.search"; }
    }
    else { 
	$status = system("$cmsearch $searchopts --tabfile $resultdir/$msaname.tmp $modeldir/$msaname.cm $fafile > $resultdir/$msaname.search");
	if ($status != 0) { die "FAILED: $cmsearch $searchopts --tabfile $resultdir/$msaname.tmp $resultdir/$msaname.hmm $fafile > $resultdir/$msaname.search"; }
    }

    open(OUTPUT, "$resultdir/$msaname.tmp") || die "FAILED: to open $resultdir/$msaname.tmp tabular output file"; 
    while (<OUTPUT>)
    {
	if (/^\#/) { next; }
	@fields   = split(' ', $_, 9);
	$target      = $fields[1];
	$target_from = $fields[2];
	$target_to   = $fields[3];
	$bitscore    = $fields[6];
	$pval        = $fields[7];
	printf TMPOUTFILE "%10g %10.1f %10d %10d %20s %35s\n", $pval, $bitscore, $target_from, $target_to, $target, $msaname;
    }

    unlink "$resultdir/$msaname.tmp";
}
close TABLE;
close OUTFILE;

# Final step use 'identify-positives.pl' to identify positives in the temporary output file to
# create the permanent output file
$status = system("perl $idscript $posfile $tmpoutfile > $outfile");
if ($status != 0) { die "FAILED: $idscript $posfile $tmpoutfile > $outfile"; }
unlink $tmpoutfile;
    
    

