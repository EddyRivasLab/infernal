.TH "cmbuild" 1 "@RELEASEDATE@" "@PACKAGE@ @RELEASE@" "@PACKAGE@ Manual"

.SH NAME
.TP 
cmbuild - construct a CM from an RNA multiple sequence alignment

.SH SYNOPSIS
.B cmbuild
.I [options]
.I cmfile
.I alifile

.SH DESCRIPTION

.B cmbuild
read an RNA multiple sequence alignment from
.I alifile,
constructs a covariance model (CM),
and saves the CM to
.I cmfile.

.PP
The alignment file must be in Stockholm format, and
must contain consensus secondary structure annotation.
.B cmbuild
uses the consensus structure to determine the architecture
of the CM. 

.PP
The alignment file may be a database containing more than one
alignment.  If so, the resulting
.I cmfile
will be a database of CMs, one per alignment.

.PP
The expert options 
.B --ctarget, --cmindiff, 
and 
.B --call
result in multiple CMs being built from each alignment in
.I alifile
as described below.

.SH OPTIONS

.TP
.B -h
Print brief help; includes version number and summary of
all options, including expert options.

.TP
.BI -o " <f>"
Direct the summary output of 
.B cmbuild 
to file 
.I <f>.
By default, 
.B cmbuild
prints information summarizing the CMs to stdout.

.TP
.BI -n " <s>"
Name the covariance model 
.I <s>. 
(Does not work if 
.I alifile
contains more than one alignment).
The default is to use the name of the alignment 
(given by the #=GF ID tag, in Stockholm format),
or if that is not present, to use the name of
the alignment file minus any file type extension plus a \'-\' and a positive
integer indicating the position of that alignment in the file
(that is, the first alignment in a file "myrnas.sto" would give
a CM named "myrnas-1", the second alignment would give a CM named "myrnas-2").

.TP
.BI -A
Append the CM to 
.I cmfile,
if
.I cmfile
already exists.

.TP
.BI -F
Allow 
.I cmfile
to be overwritten. Normally, if
.I cmfile
already exists, 
.B cmbuild 
exits with an error unless the
.I -A
or 
.I -F
option is set.

.TP
.BI -1
Reduce the summary output to a single line in tabular format for each
CM that is built. Each line has six fields, \'aln\': the index of the
alignment used to build the CM, \'cm idx\': the index of the CM in 
.I cmfile, 
\'name\': the name of the CM, \'nseq\': the number of sequences in the
alignment used to build the CM, \'alen\': the length of the alignment
used to build the CM, and \'clen\': the consensus length of the CM.

.SH EXPERT OPTIONS

.TP
.BI --rsearch " <f>"
Use RSEARCH parameterization with the RIBOSUM matrix in file 
.I <f>.
RIBOSUM matrix files are included with @PACKAGE@ in the 
\'matrices/\'
subdirectory of the top-level @PACKAGE@ directory.
RIBOSUM matrices are substitution score matrices trained specifically
for structural RNAs with separate single stranded residue and base pair
substitution scores. For more information see the RSEARCH publication 
(Klein and Eddy, BMC Bioinformatics 4:44, 2003). With 
.B --rsearch 
enabled, all alignments in 
.I alifile
must contain exactly 1 sequence or the
.B --call 
option must be used as described below.

.TP
.BI --binary 
Save the model in a compact binary format. The default
is a more readable ASCII text format.

.TP
.BI --informat " <s>"
Assert that the input alignments in 
.I alifile
is in format
.I <s>.
Do not run Babelfish format autodetection. This increases
the reliability of the program somewhat, because 
the Babelfish can make mistakes; particularly
recommended for unattended, high-throughput runs
of @PACKAGE@. 
.I <s>
is case-insensitive.
This option is a bit forward-looking;
.B cmbuild 
currently only accepts Stockholm format, but
this may not be true in the future.

.TP
.B --rf
Use reference coordinate annotation (#=GC RF line, in Stockholm)
to determine which columns are consensus, and which are inserts.
Any non-gap character indicates a consensus column. (For example,
mark consensus columns with "x", and insert columns with ".".)
The default is to determine this automatically; if the
frequency of gap characters in a column is
greater than a threshold, gapthresh (default 0.5), the column
is called an insertion.

.TP
.BI --gapthresh " <x>"
Set the gap threshold (used for determining which columns
are insertions versus consensus; see 
.B --rf 
above) to 
.I <x>.
The default is 0.5.

.TP
.B --elself " <x>"
Set the local end (EL) state self transition probability to 
.I <x>.
By default this probability is 0.94 (optimized using an internal
development benchmark). As this probability decreases from 1.0 towards 0.0,
the bit score penalty for large insertions increases for locally
configured CMs. See the User's Guide for more information on locally
configured CMs.

.TP 
.B --wgsc
Use the Gerstein/Sonnhammer/Chothia (GSC) weighting algorithm. This is the
default unless the number of sequences in the alignment exceeds a
cutoff (see
.B --pbswitch),
in which case the default becomes the faster Henikoff position-based
weighting scheme.

.TP 
.B --wblosum
Use the BLOSUM filtering algorithm to weight the sequences,
instead of the default GSC weighting.
Cluster the sequences at a given percentage identity (see
.B --wid);
assign each cluster a total weight of 1.0, distributed equally
amongst the members of that cluster.

.TP
.B --wpb
Use the Henikoff position-based weighting scheme. This weighting
scheme is automatically used (overriding 
.B --wgsc
and 
.B --wblosum) 
if the number of sequences in the alignment exceeds a cutoff (see
.B --pbswitch).

.TP 
.B --wnone
Turn sequence weighting off; e.g. explicitly set all
sequence weights to 1.0.

.TP
.B --wgiven
Use sequence weights as given in annotation in the input alignment
file. If no weights were given, assume they are all 1.0.  The default
is to determine new sequence weights by the
Gerstein/Sonnhammer/Chothia algorithm, ignoring any annotated weights.

.TP 
.B --pbswitch " <n>"
Set the cutoff for automatically switching the weighting method to the Henikoff
position-based weighting scheme to 
.I <n>.
If the number of sequences in the alignment exceeds
.I <n>
Henikoff weighting is used. 
By default 
.I <n>
is 5000.

.TP 
.BI --wid " <x>"
Controls the behavior of the 
.I --wblosum 
weighting option by setting the percent identity for clustering the
alignment to
.I <x>.

.TP
.B --eent
Use the entropy weighting strategy to determine the effective sequence
number that gives a target mean match state relative entropy. This option 
is the default, and can be turned off with 
.B --enone.
The default target mean match state relative entropy is 1.46 bits but can be
changed with
.B --ere.
The default of 1.46 bits is automatically changed if the total
relative entropy of the model (summed match state relative entropy)
is less than a cutoff, which is
is 6.0 bits by default, but can be changed with the 
.B --eX 
option.

.TP 
.B --enone
Turn off the entropy weighting strategy. The effective sequence number
is just the number of sequences in the alignment.

.TP 
.BI --ere " <x>"
Set the target mean match state entropy as 
.I <x>.
By default the target entropy 1.46 bits. This default value was
empirically determined as optimal in a RFAM based benchmark described
in (Nawrocki and Eddy, PLoS Computational Biology 3(3): e56, 2007).

.TP 
.BI --eX " <x>"
Set the minimum allowed total relative entropy of a CM as
.I <x>.
By default this value is 6.0 bits because empirically models with
lower entropy have difficulty distinguishing homologous
sequences from random background. 

.TP
.BI --cfile " <f>"
Save a file containing observed count vectors (both emissions and
transitions) to a counts file
.I <f>.
One use for this file is as the starting point for estimating
Dirichlet priors from observed RNA structure data.

.TP
.BI --cmtbl " <f>"
Save a tabular description of the CM's topology to a file
.I <f>.
Primarily useful for debugging CM architecture construction.

.TP
.BI --emap " <f>"
Save a consensus emission map to a file 
.I <f>.
This file relates the numbering system of states in the CM's tree-like
directed graph to the linear numbering of consensus columns. 
Primarily useful for debugging.

.TP
.BI --gtree " <f>"
Save an ASCII picture of the high level structure of the CM's
guide tree to a file 
.I <f>.
Primarily useful for debugging.

.TP
.BI --gtbl " <f>"
Save a tabular description of the nodes in CM's guide tree to a file
.I <f>.
Primarily useful for debugging.

.TP
.BI --tfile " <f>"
Dump tabular inferred sequence tracebacks for each individual
training sequence to a file 
.I <f>.
Primarily useful for debugging.

.TP 
.B --nobalance
Turn off the architecture "rebalancing" algorithm. The nodes in a CM
are initially numbered in standard preorder traversal. The rebalancing
algorithm is an optimizer that reorders the numbering of the CM in
order to absolutely guarantee certain algorithmic performance
bounds. However, it is a stylistic riff that has almost no real
empirical impact on performance, and is a tricky algorithm to get
right. This option was inserted for debugging purposes. It is
sometimes also useful to obtain a simple preorder traversal numbering
system in the CM architecture (for illustrative purposes,
for example).

.TP
.BI --regress " <f>"
Save regression test information to a file
.I <f>. 
This is part of the automated testing procedure at each release. 

.TP
.B --ignorant
Strip all base pair secondary structure information from all input
alignments in 
.I alifile
before building the CM(s). All resulting CM(s) will
have zero MATP (base pair) nodes, with zero bifurcations.

.TP
.BI --nodetach
Do not detach one of two insert states that model insertions at
exactly the same position in the model. By default, one of these states is
detached, making it unreachable in the model. This default behavior
was adopted to address an ambiguity in the CM grammar due to a design
flaw. Useful primarily for debugging and regression tests as earlier versions of 
.B cmbuild 
did not detach these insert states.

.TP
.BI --null " <f>"
Read a null model from 
.I <f>.
The null model defines the probability of each RNA nucleotide in
background sequence, the default is to use 0.25 for each nucleotide. 
The format of null files is documented in the User's Guide.

.TP
.BI --prior " <f>"
Read a Dirichlet prior from 
.I <f>, 
replacing the default mixture Dirichlet.
The format of prior files is documented in the User's Guide.

.TP
.BI --ctarget " <n>"
Cluster each alignment in 
.I alifile 
by percent identity. Find a cutoff percent id threshold 
that gives exactly 
.I <n>
clusters and build a separate CM from each cluster. If 
.I <n> 
is greater than the number of sequences in the alignment
the program will not complain, and each sequence in the alignment
will be its own cluster.  Each CM will have a positive integer
appended to its name indicating the order in which it was built. For
example, if 
.B cmbuild --ctarget 3
is called with 
.I alifile 
"myrnas.sto", and "myrnas.sto" has exactly one Stockholm alignment in
it with no #=GF ID tag annotation, three CMs will be built, the first
will be named "myrnas-1.1", the second, "myrnas-1.2", and the third "myrnas-1.3".
(As explained above for the 
.B -n
option, the first number "1" after "myrnas" indicates the
CM was built from the first alignment in "myrnas.sto".)

.TP
.BI --cmaxid " <x>"
Cluster each sequence alignment in 
.I alifile 
by percent identity. Define clusters at the cutoff fractional id similarity
of
.I <x>
and build a separate CM from each cluster. 
No two sequences will be be more than 
.I <x> 
fractionally identical (
.I <x>
* 100 percent identical) if those two sequences are in different
clusters.
The CMs are named as described above for
.B --ctarget.

.TP
.B --call
Build a separate CM from each sequence in each alignment in
.I alifile.
Naming of CMs takes place as described above for
.B --ctarget.
Using this option in combination with
.B --rsearch
causes a separate CM to be built and parameterized using a RIBOSUM
matrix for each sequence in 
.I alifile.

.TP
.B --corig
After building multiple CMs using 
.B --ctarget, --cmindiff
or
.B --call
as described above, build a final CM using the complete original
alignment from
.I alifile.
The CMs are named as described above for
.B --ctarget
with the exception of the final CM built from the original alignment
which is named in the default manner, without an appended integer. 

.TP 
.B --refine " <f>"
Attempt to refine the alignment before building the CM using
expectation-maximization (EM). A CM is first built from the initial
alignment as usual. Then, the sequences in the alignment are realigned
optimally (with the HMM banded CYK algorithm, optimal means optimal 
given the bands) to the CM, and a new CM is built
from the resulting alignment. The
sequences are then realigned to the new CM, and a new CM is built from
that alignment. This is continued until convergence, specifically when 
the alignments for two successive iterations are not significantly
different (the summed bit scores of all the sequences in the alignment
changes less than 1% between two successive iterations). The final
alignment (the alignment used to build the CM that gets written to 
.I cmfile)
is written to 
.I <f>.

.TP 
.B --gibbs
Modifies the behavior of
.B --refine 
so Gibbs sampling is used instead of EM. The difference is that
during the alignment stage the alignment is not necessarily optimal,
instead an alignment (parsetree) for each sequences is sampled from the
posterior distribution of alignments as determined by the Inside
algorithm. Due to this sampling step
.B --gibbs
is non-deterministic, so different runs with the same alignment may
yield different results. This is not true when 
.B --refine
is used without the 
.B --gibbs
option, in which case the final alignment and CM will always be the
same. When 
.B --gibbs 
is enabled, the 
.B -s " <n>" 
option can be used to seed the random number generator predictably,
making the results reproducible. 
The goal of the 
.B --gibbs
option is to help expert RNA alignment curators refine structural
alignments by allowing them to observe alternative high scoring
alignments. 

.TP
.BI -s " <n>"
Set the random seed to 
.I <n>, 
where 
.I <n> 
is a positive integer. This option can only be used in
combination with 
.B --gibbs. 
The default is to use time() to
generate a different seed for each run, which means that two different
runs of 
.B cmbuild --refine 
.I <f> 
--gibbs 
on the same alignment will give slightly different
results. You can use this option to generate reproducible results.

.TP
.B -l
With 
.B --refine,
turn on the local alignment algorithm, which allows the alignment
to span two or more subsequences if necessary (e.g. if the structures
of the query model and target sequence are only partially shared),
allowing certain large insertions and deletions in the structure
to be penalized differently than normal indels.
The default is to globally align the query model to the target
sequences.

.TP
.BI --sub
With 
.B --refine,
turn on the sub model construction and alignment procedure. For each
sequence to be realigned an HMM is first used to predict the model start and end
consensus columns, and a new sub CM is constructed that only models
consensus columns from start to end. The sequence is then aligned to this sub CM.
This option is useful for building CMs for alignments with sequences that are known to
truncated, non-full length sequences. This option is experimental and
not rigorously tested, use at your own risk.
This "sub CM" procedure is not the same
as the "sub CMs" described by Weinberg and Ruzzo.

.TP
.BI --nonbanded
With 
.B --refine, 
do not use HMM bands to accelerate alignment.  Use the
full CYK algorithm which is guaranteed to give the optimal alignment. 
This will slow down the run significantly, especially for large models.

.TP
.BI --tau " <f>"
With 
.B --refine, 
set the tail loss probability used during HMM band calculation to
.I <f>. 
This is the amount of probability mass within the HMM posterior
probabilities that is considered negligible. The default value is 1E-7.
In general, higher values will result in greater acceleration, but
increase the chance of missing the optimal alignment due to the HMM
bands.

.TP
.BI --mxsize " <x>"
With 
.B --refine, 
set the maximum allowable matrix size for alignment to 
.I <x>
megabytes. By default this size is 256 Mb. 
This should be large enough for the vast majority of alignments, 
however it is possible that when run with
.B --refine, cmbuild 
will exit prematurely, reporting an error message that 
the matrix exceeded it's maximum allowable size. In this case, the
.B --mxsize 
can be used to raise the limit.

.TP
.BI --verbose
With 
.B --refine, 
output the intermediate alignments at each iteration of the refinement
procedure (as described above for
.B --refine).
The alignments will be printed to stdout, not to the
.I cmfile, 
nor the 
.B --refine 
output alignment file. 

.TP
.BI --rna
Specify that the input alignment file
.I alifile 
has RNA sequences. Do not autodetect the alphabet.
This increases the reliability of the program somewhat, because 
for very small alignments it may be impossible to 
distinguish RNA from DNA; particularly
recommended for unattended, high-throughput runs
of
.B cmbuild.

.TP
.BI --dna
Specify that the input alignment file
.I alifile 
has DNA sequences. Do not autodetect the alphabet.
This increases the reliability of the program somewhat, because 
for very small alignments, it may be impossible to 
distinguish RNA from DNA; particularly
recommended for unattended, high-throughput runs
of
.B cmbuild.



