#######################################################
# Makefile.in for infernal/rigfilters/lp_solve
# 
# This Makefile is not one of the standard ones provided
# with the lp_solve package.  It has be written specially
# for integration of installation with the infernal 
# package, and relies on infernal's top-level configure
#######################################################

# your compiler and compiler flags
CC     = @CC@
CFLAGS = @CFLAGS@

#should be OK in most situations:
#CFLAGS= -O

# HP/UX 9.0X optimized code
#CFLAGS= +O3 +Oaggressive +Olibcalls -Aa -D_POSIX_SOURCE -DCHECK +FP VZOUiD
# HP/UX 9.0X debugging
#CFLAGS= -g -Aa -D_POSIX_SOURCE -DCHECK +FP VZOUiD

# nice for gcc
#CFLAGS= -O3 -Wall -pedantic -ansi
#CFLAGS= -g -Wall -pedantic -ansi

# Option -DCHECK checks for numerical problems during rounding of numbers.
# It will slow things down a bit.
# You can add a -DREAL=<float type> to the CFLAGS, to change the default float
# type used in lp_solve (double) to float or 'long double'. However, type float
# might be fast on your computer, but it is not accurate enough to solve even
# moderately sized problems without running into numerical problems.
# The use of long doubles does increase the numerical stability of lp_solve,
# if your compiler actually implements them with more bits than a double. But
# it slows down things quite a bit.

# Choose your favorite or available version of lex and yacc

YACC = @YACC@
#YACC= yacc
#especially for linux:
#YACC= bison -y

LEX = @LEX@
ifeq ($(LEX),flex)
   LEX := $(LEX) -l
endif
#LEX= lex
#especially for linux:
#LEX= flex -l

LEXLIB = @LEXLIB@
#LEXLIB= -ll
#especially for linux:
#LEXLIB= -lfl

LIBS = @LIBS@
#ANSI math lib
#MATHLIB= -lM
#non-ANSI math lib, should also work
#MATHLIB= -lm

LPKSRC.c= lpkit.c solve.c debug.c read.c readmps.c hash.c presolve.c
LEXFILE.l= lex.l
YACCFILE.y= lp.y
#TESTFILES1= lp_examples/*.lp
#TESTFILES2= lp_examples/*.mps

#TARGET=lp_solve
LPKLIB=liblpk.a

LEXFILE.c= $(LEXFILE.l:.l=.c)
YACCFILE.c= $(YACCFILE.y:.y=.c)
YACCFILE.o= $(YACCFILE.y:.y=.o)
#CSOURCES=lpkit.c solve.c debug.c read.c readmps.c lp_solve.c demo.c hash.c presolve.c $(LEXFILE.c) $(YACCFILE.c)
CSOURCES= $(LEXFILE.c) $(YACCFILE.c)
COBJ=$(CSOURCES:.c=.o)
LPKSRC= $(LPKSRC.c) $(YACCFILE.c)
LPKOBJ= $(LPKSRC:.c=.o)
#HEADERS=lpkit.h patchlevel.h debug.h read.h hash.h declare.h ufortify.h fortify.h

#INSTALL = install
#INSTALL_PROGRAM = $(INSTALL)
#INSTALL_DATA = $(INSTALL)
#prefix = /usr/local
#exec_prefix = $(prefix)
#bindir = $(exec_prefix)/bin
#libdir = $(exec_prefix)/lib
#includedir = $(prefix)/include
#mandir = $(prefix)/man/man1

#all:	demo $(TARGET) lp2mps mps2lp
all:	$(LPKLIB)

#$(COBJ): $(HEADERS)

#demo:	demo.o $(LPKLIB)
#	$(CC) -o demo $(CFLAGS) demo.o $(LPKLIB) $(LEXLIB) $(LIBS)

#lp2mps:	lp2mps.o $(LPKLIB)
#	$(CC) -o lp2mps $(CFLAGS) lp2mps.o $(LPKLIB) $(LEXLIB) $(LIBS)

#mps2lp: mps2lp.o $(LPKLIB)
#	$(CC) -o mps2lp $(CFLAGS) mps2lp.o $(LPKLIB) $(LEXLIB) $(LIBS)

#$(TARGET): lp_solve.o $(LPKLIB)
#	$(CC) -o $(TARGET) $(CFLAGS) lp_solve.o $(LPKLIB) $(LEXLIB) $(LIBS)

#purify: lp_solve.o $(LPKLIB)
#	purify $(CC) -o $(TARGET) $(CFLAGS) lp_solve.o $(LPKLIB) $(LEXLIB) $(LIBS)

#quantify: lp_solve.o $(LPKLIB)
#	quantify $(CC) -o $(TARGET) $(CFLAGS) lp_solve.o $(LPKLIB) $(LEXLIB) $(LIBS)

$(LPKLIB): $(LPKOBJ)
	ar rv $@ $(LPKOBJ)
	ranlib $(LPKLIB)

$(YACCFILE.o): $(LEXFILE.c)

$(LEXFILE.c): $(LEXFILE.l)
	$(LEX) $(LEXFILE.l)
	sed -e "s/yy/lp_yy/g" lex.yy.c >$(LEXFILE.c)
	rm lex.yy.c

$(YACCFILE.c): $(YACCFILE.y)
	$(YACC) $(YACCFILE.y)
	sed -e "s/yy/lp_yy/g" y.tab.c >$(YACCFILE.c)
	rm y.tab.c

#test:
#	-for i in $(TESTFILES1); do\
		./$(TARGET) -s -S1 < $$i > xxx.tmp;\
		tr -d '\r' < lp_examples/`basename $$i .lp`.out > xxxx.tmp;\
		if diff -b xxx.tmp xxxx.tmp > /dev/null; then\
			echo "$$i gives the correct result";\
		else\
			echo "*** $$i gives different result, please check ***";\
		fi;\
	done;\
	for i in $(TESTFILES2); do\
		./$(TARGET) -mps -s -S1 < $$i > xxx.tmp;\
		tr -d '\r' < lp_examples/`basename $$i .mps`.out > xxxx.tmp;\
		if diff -b xxx.tmp xxxx.tmp > /dev/null; then\
			echo "$$i gives the correct result";\
		else\
			echo "*** $$i gives different result, please check ***";\
		fi;\
	done;\
        rm xxx.tmp xxxx.tmp

#mktest:
#	-for i in $(TESTFILES1); do\
		./$(TARGET) -s -S1 -time < $$i > lp_examples/`basename $$i .lp`.out;\
	done;\
	for i in $(TESTFILES2); do\
		./$(TARGET) -mps -s -S1 -time < $$i > lp_examples/`basename $$i .mps`.out;\
	done;\

#$(TARGET).man: $(TARGET).1
#	nroff -man $(TARGET).1 > $(TARGET).man

#MANIFEST: clean
#	ls -lR > MANIFEST; ls -lR > MANIFEST

clean:
	rm -f *.a *.o $(LEXFILE.c) $(YACCFILE.c)

distclean:
	make clean
	-rm Makefile

#distrib: $(TARGET).man MANIFEST
#	cd ..; tar -czvf lp_solve_4.0.tar.gz lp_solve_4.0

#install: $(bindir)/$(TARGET) $(libdir)/$(LPKLIB) $(includedir)/lpkit.h $(includedir)/hash.h $(includedir)/fortify.h $(includedir)/declare.h $(mandir)/$(TARGET).1

#$(bindir)/$(TARGET): $(TARGET)
#	$(INSTALL_PROGRAM) $(TARGET) $(bindir)/$(TARGET)

#$(libdir)/$(LPKLIB): $(LPKLIB)
#	$(INSTALL_DATA) $(LPKLIB) $(libdir)/$(LPKLIB)

#$(includedir)/%.h: %.h
#	$(INSTALL_DATA) $< $@

#$(mandir)/$(TARGET).1: $(TARGET).1
#	-$(INSTALL_DATA) $(TARGET).1 $(mandir)/$(TARGET).1

#TAGS:
#	etags *.[chyl]
